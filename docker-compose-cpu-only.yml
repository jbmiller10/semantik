# Docker Compose configuration for Semantik (Document Embedding System)
# This is the CPU-only configuration (no GPU support)
# Usage: docker compose -f docker-compose-cpu-only.yml up -d
version: '3.8'

services:
  # Qdrant Vector Database
  qdrant:
    image: qdrant/qdrant:latest
    container_name: semantik-qdrant
    ports:
      - "6333:6333"
      - "6334:6334"  # gRPC port
    volumes:
      - qdrant_storage:/qdrant/storage
    environment:
      - QDRANT__SERVICE__HTTP_PORT=6333
      - QDRANT__SERVICE__GRPC_PORT=6334
      - QDRANT__LOG_LEVEL=INFO
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 4G
        reservations:
          memory: 2G
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6333/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Search API Service (vecpipe)
  vecpipe:
    build:
      context: .
      dockerfile: Dockerfile
      target: runtime
    container_name: semantik-vecpipe
    command: ["vecpipe"]
    ports:
      - "8000:8000"
    environment:
      # Qdrant configuration
      - QDRANT_HOST=qdrant
      - QDRANT_PORT=6333
      # Model defaults (same for GPU and CPU)
      - DEFAULT_COLLECTION=${DEFAULT_COLLECTION:-work_docs}
      - USE_MOCK_EMBEDDINGS=${USE_MOCK_EMBEDDINGS:-false}
      - DEFAULT_EMBEDDING_MODEL=${DEFAULT_EMBEDDING_MODEL:-Qwen/Qwen3-Embedding-0.6B}
      - DEFAULT_QUANTIZATION=${DEFAULT_QUANTIZATION:-float16}
      # CPU-only mode
      # Service configuration
      - SEARCH_API_PORT=8000
      - WAIT_FOR_QDRANT=true
    volumes:
      # Mount data directories
      # Note: Ensure host directories have appropriate permissions (uid 1000)
      - ./data:/app/data
      - ./logs:/app/logs
    depends_on:
      - qdrant
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 4G
        reservations:
          memory: 2G
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8000/health')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Web UI Service
  webui:
    build:
      context: .
      dockerfile: Dockerfile
      target: runtime
    container_name: semantik-webui
    command: ["webui"]
    ports:
      - "8080:8080"
    environment:
      # Service URLs for inter-container communication
      - SEARCH_API_URL=http://vecpipe:8000
      - SEARCH_API_HOST=vecpipe
      - QDRANT_HOST=qdrant
      - QDRANT_PORT=6333
      # Model defaults (same for GPU and CPU)
      - JWT_SECRET_KEY=${JWT_SECRET_KEY:-CHANGE_THIS_TO_A_STRONG_SECRET_KEY}
      - ACCESS_TOKEN_EXPIRE_MINUTES=${ACCESS_TOKEN_EXPIRE_MINUTES:-1440}
      - DEFAULT_COLLECTION=${DEFAULT_COLLECTION:-work_docs}
      - USE_MOCK_EMBEDDINGS=${USE_MOCK_EMBEDDINGS:-false}
      - DEFAULT_EMBEDDING_MODEL=${DEFAULT_EMBEDDING_MODEL:-Qwen/Qwen3-Embedding-0.6B}
      - DEFAULT_QUANTIZATION=${DEFAULT_QUANTIZATION:-float16}
      # CPU-only mode
      - MODEL_MAX_MEMORY_GB=${MODEL_MAX_MEMORY_GB:-8}
      - MONITOR_GPU_MEMORY=false
      # Service configuration
      - WEBUI_PORT=8080
      - WAIT_FOR_SEARCH_API=true
    volumes:
      # Mount data directories
      # Note: Ensure host directories have appropriate permissions (uid 1000)
      - ./data:/app/data
      - ./logs:/app/logs
      # Mount document directories for processing
      - ${DOCUMENT_PATH:-./documents}:/mnt/docs:ro
    depends_on:
      - vecpipe
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 2G
        reservations:
          memory: 1G
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

volumes:
  # Named volume for Qdrant data persistence
  qdrant_storage:
    driver: local

networks:
  default:
    name: semantik-network
    driver: bridge