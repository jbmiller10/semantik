Ticket: FE-002 – Refactor CreateCollectionModal Workflow
Phase: 3 – Frontend Modularization (Sprints 3–4)
Owner Type: Frontend engineer with async workflow and form handling expertise

Repository Context:
- `CreateCollectionModal.tsx` (`apps/webui-react/src/components/`) spans 582 LOC and coordinates collection creation, optional data source ingestion, error toasts, and complex forms.
- Uses multiple `useState` hooks for submission state, detected file types, deferred operations, etc.
- Audit highlights the modal as overloaded with async workflows and state management complexities.

Problem Statement:
The modal intermixes form validation, REST mutations (React Query), and conditional flows (e.g., follow-up ingestion call). Stateless coding agents will struggle without clear separation of responsibilities. Need to decompose into hooks and child components, improving readability and testability.

Goal:
Extract business logic into dedicated hooks and helper components, keeping modal shell as a minimal orchestrator. Ensure validation, submission, and follow-up operations remain correct.

Implementation Steps:
1. Document existing flow:
   - Creation request -> returns `operation_id`.
   - Optional source path triggers additional API call or scheduling.
   - Toast notifications and UI transitions (closing modal, navigating to collection).
2. Create hooks:
   - `useCollectionCreationFlow()` handling form state, validation, submission, error mapping, success callbacks.
   - `useSourceUpload(operationId)` (or similar) coordinating deferred ingestion when source path provided.
   - Hooks should surface typed handlers (e.g., `handleSubmit`, `handleAdvancedToggle`).
3. Modularize UI pieces:
   - Build smaller components for advanced settings panel, file picker, progress indicators.
   - Use context or props to share state from hooks.
4. Replace inline React Query calls with hook-based usage, ensuring caching keys remain consistent.
5. Align with backend constants:
   - Where the modal references chunking strategies/defaults, fetch from centralized API or reuse shared constants introduced in ENG-003 to avoid duplication.
6. Testing:
   - Add unit tests for hooks verifying success/failure paths, state resets, delayed ingestion logic.
   - Component tests ensuring modal renders expected subcomponents and wires callbacks.
   - Update or add e2e tests verifying user can create collection with and without initial source.
7. Documentation:
   - Inline comments or README snippet describing new hook responsibilities and expected inputs/outputs.

Acceptance Criteria:
- `CreateCollectionModal.tsx` primarily imports hooks/components and is reduced to modal composition (<250 LOC target).
- Hooks/components live under `apps/webui-react/src/hooks/` and `apps/webui-react/src/components/create-collection/` with type-safe interfaces.
- All behaviours preserved: validation errors, async step sequencing, toast notifications, navigation, advanced settings toggles.
- Tests demonstrate hook logic (success, failure, cancellation) and component wiring; CI commands (`npm test --prefix apps/webui-react`, lint/type checks) succeed.
- Documentation clarifies flow for future contributors.

Out of Scope:
- Changing API contract or backend endpoints invoked.
- Introducing new design elements beyond structural decomposition.

References:
- apps/webui-react/src/components/CreateCollectionModal.tsx
- apps/webui-react/src/services/api/v2/collections.ts (API clients)
- apps/webui-react/src/stores/uiStore.ts
