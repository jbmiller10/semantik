Ticket: ENG-004 – Align Chunking Validation Logic
Phase: 1 – Shared Utilities (Sprint 1)
Owner Type: Backend engineer with security validation experience

Repository Context:
- `packages/webui/services/chunking_validation.py` (ChunkingInputValidator) focuses on security-oriented validation (XSS, SQLi patterns, encoding checks).
- `packages/webui/services/chunking/validator.py` (ChunkingValidator) handles domain/business rules (strategy whitelist, config ranges, content/document limits) and repository-backed permission checks.
- The audit flagged logic duplication and divergence between these modules.

Problem Statement:
While responsibilities differ, there is overlapping validation of chunk size, chunk overlap, strategy names, and content checks. Duplication increases maintenance burden and leads to inconsistent error messaging. Goal is to share common rules without losing separation between security sanitization and domain validation.

Goal:
Introduce shared validation primitives that encapsulate common checks (chunk size, overlap, strategy existence, null byte detection) and ensure both validators reuse them. Preserve existing public APIs and error types while unifying rule enforcement.

Implementation Steps:
1. Inventory overlapping logic:
   - Chunk size/overlap bounds appear in both modules but with slightly different thresholds.
   - Strategy validation replicates allowed lists.
   - Content sanitization partly duplicated.
   Document findings in the new shared module.
2. Create `packages/webui/services/chunking/validation_shared.py` (name flexible) containing functions for:
   - `validate_chunk_size(value, min_allowed, max_allowed, correlation_id=None)` returning normalized int or raising `ValidationError`.
   - `validate_chunk_overlap(overlap, chunk_size, ...)` with consistent messaging.
   - `validate_strategy_name(strategy, allowed_strategies)` pulling from canonical constants (see ENG-003).
   - Content sanitization helpers that wrap regex safety utilities.
3. Refactor `ChunkingInputValidator` and `ChunkingValidator` to call shared helpers instead of reimplementing logic.
   - Keep `ChunkingValidator` responsible for DB-backed permission checks and high-level request validation.
   - Keep `ChunkingInputValidator` responsible for security scanning, but delegate repeated checks (chunk size, overlap) to shared helpers.
4. Ensure both validators expose consistent error messages and codes by using shared helper output.
5. Update tests:
   - Add targeted unit tests for the new shared helper module covering boundary conditions, invalid values, and message formatting.
   - Update existing validator tests to ensure no behaviour regressions (size bounds, strategy enforcement, encoding errors, etc.).
6. Verify wiring:
   - Ensure orchestrator (`packages/webui/services/chunking/orchestrator.py`) and API dependencies continue to instantiate validators correctly.
   - Update type hints/imports.
7. Documentation:
   - Document in module-level comments which responsibilities belong to each validator and how to extend rules.

Acceptance Criteria:
- Shared validation helper module exists and is imported by both `chunking_validation.py` and `chunking/validator.py` for overlapping rules.
- No duplicated chunk size/overlap/strategy validation logic remains in the two validators; they rely on the shared functions while retaining their unique responsibilities.
- Unit tests cover shared helpers and confirm that both validators surface consistent error messages.
- Repository quality commands (`make lint`, `make type-check`, `make test`) succeed.
- Future contributors can add validation rules in one location with clear documentation.

Out of Scope:
- Introducing new validation rules beyond consolidating existing ones.
- Modifying permission checks or repository lookups.

References:
- packages/webui/services/chunking_validation.py:1-200
- packages/webui/services/chunking/validator.py:1-200
- packages/webui/services/chunking/orchestrator.py (validator usage)
