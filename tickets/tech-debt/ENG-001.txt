Ticket: ENG-001 – Extract Progress Update Manager
Phase: 1 – Shared Utilities (Sprint 1)
Owner Type: Backend engineer comfortable with Redis, Celery, FastAPI stack

Repository Context:
- Monorepo root: /home/john/semantik
- Backend services live under packages/webui/
- Current progress update logic is duplicated across Celery tasks and the websocket manager
- Redis is used both synchronously (Celery worker context) and asynchronously (FastAPI/WebSocket context)

Problem Statement:
Progress update payload construction, Redis stream publishing, TTL management, and error handling live in three nearly identical implementations:
1. packages/webui/chunking_tasks.py:1204-1247 (`_send_progress_update_sync`) – sync helper for Celery tasks
2. packages/webui/chunking_tasks.py:1449-1486 (`_send_progress_update`) – async-style signature but still using sync Redis client
3. packages/webui/websocket_manager.py:254-295 (`ScalableWebSocketManager.send_update`) and 657-701 (`send_chunking_progress`) – repeats stream naming, TTL logic, and error handling
This duplication causes drift in timestamp formats, stream keys, throttling, and logging. Bugs or enhancements must be applied in multiple places.

Goal:
Create a reusable ProgressUpdateManager abstraction that encapsulates stream payload normalization, throttling hooks, and sync/async Redis interactions. Update all call sites to use the shared manager without breaking existing behaviour or metrics.

Implementation Steps:
1. Introduce a new module `packages/webui/services/progress_manager.py` containing:
   - Data class or simple namespace defining payload fields (`operation_id`, `correlation_id`, `progress`, `message`, additional metadata).
   - A `ProgressUpdateManager` class that accepts sync Redis client, optional async Redis client, stream naming strategy, TTL defaults, and optional throttling policy.
   - Methods `send_sync_update(...)` and `send_async_update(...)` that wrap existing xadd/expire logic. Ensure timestamps are ISO 8601 strings and numeric fields are serialized consistently.
   - Optional throttling helper reused by websocket manager (expose callback or composition hook).
2. Refactor `chunking_tasks.py` to:
   - Instantiate the manager once per module (reuse existing Redis client acquisition code).
   - Replace `_send_progress_update_sync` and `_send_progress_update` bodies with thin wrappers around the manager.
   - Ensure stream keys remain backward compatible (`stream:chunking:{operation_id}` and `chunking:progress:{operation_id}`). If necessary, allow configurable prefixes passed to the manager.
   - Update log messages to include structured context (operation_id, correlation_id) and rely on manager logging for failures.
3. Refactor `packages/webui/websocket_manager.py` to:
   - Inject `ProgressUpdateManager` via constructor (update DI wiring in `packages/webui/dependencies.py` if needed).
   - Replace Redis stream publishing logic in `send_update` and `send_chunking_progress` with calls to the shared manager, preserving existing throttling semantics (throttle guard should remain in websocket class but actual publish delegated to manager).
4. Provide dependency wiring:
   - Update any factory/helper (`packages/webui/dependencies.py`, `packages/webui/tasks.py`) to pass the manager instance where required.
   - Ensure tests or fixtures that patch progress helpers import the new class.
5. Tests & validation:
   - Add unit tests for `ProgressUpdateManager` covering sync and async updates, TTL application, exception handling fallback, and payload normalization.
   - Update or add tests in `tests/webui/services/test_chunking_refactored.py` (or create new test module) verifying Celery helper functions call the manager correctly (use mocks for Redis).
   - Consider adding an integration-style test that simulates a chunking operation and asserts Redis stream key usage via mocking.
6. Documentation:
   - Update inline comments and docstrings referencing the old helper names.
   - If README or operational docs mention progress updates, refresh them to reference the new manager.

Acceptance Criteria:
- A shared `ProgressUpdateManager` exists in `packages/webui/services/progress_manager.py` with clear APIs for sync and async updates.
- `chunking_tasks.py` and `websocket_manager.py` no longer duplicate payload assembly or Redis stream publishing logic; they delegate to the manager.
- Stream keys, TTL durations, and payload field names remain unchanged relative to current production behaviour.
- All existing automated tests pass (`make test`), and new unit coverage exists for success and failure cases of the manager (Redis unavailable, malformed progress values).
- No regressions in WebSocket throttling or Celery task logging (keep structured logging intact).
- Code passes repository quality gates (`make lint`, `make type-check`).

Out of Scope:
- Changing the Redis schema or stream key format beyond unifying constants.
- Modifying WebSocket throttling thresholds.
- Introducing new metrics or observability tooling beyond reuse of existing logging.

References:
- packages/webui/chunking_tasks.py:1204-1486
- packages/webui/websocket_manager.py:254-295, 657-701
- packages/webui/services/chunking_constants.py (for TTL defaults if needed)
