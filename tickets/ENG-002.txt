Ticket: ENG-002 – Centralize Error Classification Logic
Phase: 1 – Shared Utilities (Sprint 1)
Owner Type: Backend engineer with expertise in exception handling and typing

Repository Context:
- Monorepo root: /home/john/semantik
- Backend: `packages/webui/`
- Current error classification is split between Celery task helpers (string tags) and `ChunkingErrorHandler` (enum-based heuristics)

Problem Statement:
- `packages/webui/chunking_tasks.py:388-415` defines `_classify_error_sync` returning string identifiers for internal exception classes (e.g., `ChunkingMemoryError`).
- `packages/webui/services/chunking_error_handler.py:383-415` implements `classify_error` converting raw Exceptions into `ChunkingErrorType` enums using string heuristics.
- Divergent logic creates inconsistent outcomes and forces multiple code paths to evolve separately. The audit flagged this as critical duplication even though semantics differ.

Goal:
Provide a single authoritative `ErrorClassifier` that encapsulates rule evaluation. Offer lightweight adapters so Celery tasks can retain simple string outputs while service layer obtains enums. Ensure future rule extensions propagate everywhere automatically.

Implementation Steps:
1. Create `packages/webui/utils/error_classifier.py` with:
   - `ErrorClassificationResult` dataclass capturing `enum_type`, `string_code`, and optional metadata (e.g., `confidence`, `matched_rule`).
   - `ErrorClassifier` class exposing `classify(exc: Exception) -> ErrorClassificationResult` and convenience methods `as_enum(...)` / `as_code(...)`.
   - Rule definitions combining type checks (e.g., `isinstance(exc, ChunkingMemoryError)`) and message heuristics (keywords like “timeout”, “permission”). Rules should be ordered by specificity and implemented once.
   - Support for injection of custom rules (keep simple extension point via constructor parameter or class attribute).
2. Refactor `chunking_tasks.py`:
   - Replace `_classify_error_sync` with thin wrapper invoking `ErrorClassifier.as_code`. Maintain existing string outputs for compatibility (e.g., `memory_error`).
   - Ensure default mapping includes all current string constants; add translation table if result enums differ (`ChunkingErrorType.MEMORY_ERROR -> "memory_error"`).
3. Refactor `ChunkingErrorHandler.classify_error` to delegate to the shared classifier:
   - Instantiate a classifier (allow dependency injection through constructor for testing).
   - Return `ErrorClassifier.as_enum` result.
   - Remove redundant heuristics from the handler once delegation is in place.
4. Update dependency wiring:
   - Provide shared instance via `packages/webui/dependencies.py` or local module singleton.
   - Adjust tests/fixtures that patch classification to account for new module path.
5. Comprehensive testing:
   - Add unit tests for the classifier covering type-based matches, keyword-based matches, unicode/encoding errors, unknown default case, and ensuring both string and enum outputs align.
   - Update existing tests in `tests/unit/test_chunking_service_errors.py` and any Celery task tests to expect the new behaviour.
   - Write regression tests verifying that known exception classes still map to previous string codes.
6. Documentation & typing:
   - Ensure full typing coverage (mypy clean).
   - Update docstrings for Celery helpers and error handler to reference the centralized classifier.

Acceptance Criteria:
- `ErrorClassifier` lives in `packages/webui/utils/error_classifier.py` with unified rule set and dual string/enum outputs.
- `chunking_tasks.py` and `chunking_error_handler.py` no longer contain hard-coded classification heuristics beyond delegating to the classifier.
- Existing external behaviour preserved: Celery tasks still emit same string codes, handler still returns `ChunkingErrorType`.
- New tests cover classifier rules (both type and keyword-based) and protect against regressions.
- `make lint`, `make type-check`, and `make test` succeed.

Out of Scope:
- Introducing telemetry or metrics for classification decisions.
- Modifying retry strategies or downstream behaviour driven by classification.

References:
- packages/webui/chunking_tasks.py:360-415
- packages/webui/services/chunking_error_handler.py:264-415, 524+, 651+, 860+
- packages/shared/chunking/domain/exceptions.py (for exception types)
