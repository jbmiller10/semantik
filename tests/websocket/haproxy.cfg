# HAProxy Configuration for Scalable WebSocket Load Balancing
# This configuration enables sticky sessions for WebSocket connections
# ensuring clients reconnect to the same backend server

global
    # Runtime settings
    maxconn 10000
    log stdout local0
    log stdout local1 notice
    chroot /var/lib/haproxy
    stats socket /run/haproxy/admin.sock mode 660 level admin
    stats timeout 30s
    user haproxy
    group haproxy
    daemon

    # SSL/TLS settings (if using HTTPS)
    # tune.ssl.default-dh-param 2048
    # ssl-default-bind-ciphers ECDHE+AESGCM:ECDHE+AES256:ECDHE+AES128:!PSK:!DHE:!RSA:!DSS:!aNull:!MD5
    # ssl-default-bind-options no-sslv3 no-tlsv10 no-tlsv11

defaults
    mode http
    log global
    option httplog
    option dontlognull
    option http-server-close
    option forwardfor except 127.0.0.0/8
    option redispatch
    retries 3
    
    # Timeouts
    timeout connect 5000ms
    timeout client 50000ms
    timeout server 50000ms
    
    # WebSocket specific - long timeout for persistent connections
    timeout tunnel 3600s
    timeout client-fin 60s
    timeout server-fin 60s
    
    # Error handling
    errorfile 400 /etc/haproxy/errors/400.http
    errorfile 403 /etc/haproxy/errors/403.http
    errorfile 408 /etc/haproxy/errors/408.http
    errorfile 500 /etc/haproxy/errors/500.http
    errorfile 502 /etc/haproxy/errors/502.http
    errorfile 503 /etc/haproxy/errors/503.http
    errorfile 504 /etc/haproxy/errors/504.http

# Statistics dashboard
stats enable
stats uri /haproxy-stats
stats realm HAProxy\ Statistics
stats auth "${HAPROXY_STATS_USER-haproxy_admin}:${HAPROXY_STATS_PASSWORD-change_me}"

# Frontend for HTTP/WebSocket traffic
frontend websocket_frontend
    bind *:80
    # bind *:443 ssl crt /etc/haproxy/certs/semantik.pem  # For HTTPS
    
    # Capture request headers for logging
    capture request header Host len 32
    capture request header X-Forwarded-For len 32
    capture request header User-Agent len 64
    
    # ACLs for WebSocket detection
    acl is_websocket hdr(Upgrade) -i websocket
    acl is_websocket_path path_beg /ws /websocket /api/v2/ws
    
    # Health check endpoint
    acl is_health path /health
    
    # Use WebSocket backend for WebSocket connections
    use_backend websocket_backend if is_websocket OR is_websocket_path
    
    # Use health backend for health checks
    use_backend health_backend if is_health
    
    # Default to normal HTTP backend
    default_backend http_backend

# Backend for WebSocket connections with sticky sessions
backend websocket_backend
    # Load balancing algorithm - source IP hash for sticky sessions
    balance source
    
    # Hash type for consistency
    hash-type consistent
    
    # WebSocket specific options
    option http-server-close
    option forceclose
    no option httpclose
    
    # Enable WebSocket protocol
    # Timeout for WebSocket connections (1 hour)
    timeout tunnel 3600s
    
    # HTTP checks to verify backend health
    option httpchk GET /health
    http-check expect status 200
    
    # Sticky sessions using cookies (alternative to source IP)
    # cookie SERVERID insert indirect nocache
    
    # Backend servers with health checks
    # The 'check' parameter enables health checking
    # The 'weight' parameter controls load distribution
    # The 'maxconn' limits connections per server
    server ws1 webui1:8000 check weight 100 maxconn 3000 
    server ws2 webui2:8000 check weight 100 maxconn 3000 
    server ws3 webui3:8000 check weight 100 maxconn 3000 
    
    # Backup servers (activated when primary servers are down)
    # server ws_backup webui_backup:8000 backup check weight 50 maxconn 1000

# Backend for regular HTTP traffic
backend http_backend
    # Round-robin for regular HTTP requests
    balance roundrobin
    
    # Same servers but different balancing strategy
    option httpchk GET /health
    http-check expect status 200
    
    server http1 webui1:8000 check weight 100 maxconn 1000
    server http2 webui2:8000 check weight 100 maxconn 1000
    server http3 webui3:8000 check weight 100 maxconn 1000

# Backend for health checks (can be directed to a specific service)
backend health_backend
    # Direct health checks to least loaded server
    balance leastconn
    
    server health1 webui1:8000 check
    server health2 webui2:8000 check
    server health3 webui3:8000 check

# Advanced WebSocket configuration with rate limiting
frontend websocket_advanced
    bind *:8080
    
    # Rate limiting - max 100 new connections per second per IP
    stick-table type ip size 100k expire 30s store conn_rate(1s)
    tcp-request connection track-sc0 src
    tcp-request connection reject if { sc_conn_rate(0) gt 100 }
    
    # ACLs
    acl is_websocket hdr(Upgrade) -i websocket
    acl too_many_connections sc0_conn_rate() gt 100
    
    # Block if too many connections
    http-request deny if too_many_connections
    
    # Route to WebSocket backend
    use_backend websocket_backend_advanced if is_websocket
    default_backend http_backend

# Advanced backend with more sophisticated health checks
backend websocket_backend_advanced
    # IP hash with session persistence
    balance source
    hash-type consistent
    
    # Stick table for session persistence (1 hour timeout)
    stick-table type string len 32 size 100k expire 1h
    stick on cookie(sessionid)
    
    # Advanced health check
    option httpchk GET /api/v2/health
    http-check expect status 200
    http-check expect header Content-Type -m sub application/json
    
    # Connection limits and queueing
    fullconn 10000
    
    # Servers with advanced options
    # - 'rise 2' means 2 successful checks to mark as up
    # - 'fall 3' means 3 failed checks to mark as down  
    # - 'inter 2000' means check every 2 seconds
    # - 'slowstart 60s' gradually increases traffic over 60 seconds
    server ws_adv1 webui1:8000 check rise 2 fall 3 inter 2000 slowstart 60s weight 100 maxconn 3000
    server ws_adv2 webui2:8000 check rise 2 fall 3 inter 2000 slowstart 60s weight 100 maxconn 3000
    server ws_adv3 webui3:8000 check rise 2 fall 3 inter 2000 slowstart 60s weight 100 maxconn 3000

# Docker Swarm mode configuration (alternative)
# This assumes services are named 'semantik_webui' in Docker Swarm
backend websocket_swarm
    balance source
    
    # Docker Swarm service discovery
    # server-template srv 1-10 semantik_webui:8000 check resolvers docker resolve-prefer ipv4
    
    # Static configuration for non-Swarm deployments
    server swarm1 tasks.semantik_webui:8000 check
    
# Kubernetes configuration (alternative)
# This assumes services are exposed via Kubernetes service
backend websocket_kubernetes  
    balance source
    
    # Kubernetes service endpoint
    server k8s_service semantik-webui-service.default.svc.cluster.local:8000 check

# Monitoring and debugging
listen stats
    bind *:8404
    stats enable
    stats uri /monitor
    stats refresh 30s
    stats show-node
    stats show-legends
    stats show-desc WebSocket Load Balancer for Semantik
    stats auth monitor:monitor
