# Docker Compose configuration for Semantik (Document Embedding System)
# This is the single source of truth for all Docker services

services:
  # Qdrant Vector Database
  qdrant:
    image: qdrant/qdrant:latest
    container_name: semantik-qdrant
    ports:
      - "6333:6333"
      - "6334:6334"  # gRPC port
    volumes:
      - qdrant_storage:/qdrant/storage
    environment:
      - QDRANT__SERVICE__HTTP_PORT=6333
      - QDRANT__SERVICE__GRPC_PORT=6334
      - QDRANT__LOG_LEVEL=INFO
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 4G
        reservations:
          memory: 2G
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6333/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: semantik-postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-semantik}
      - POSTGRES_USER=${POSTGRES_USER:-semantik}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-CHANGE_THIS_TO_A_STRONG_PASSWORD}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=en_US.utf8 --lc-ctype=en_US.utf8
      - PGDATA=/var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - DAC_READ_SEARCH
      - FOWNER
      - SETGID
      - SETUID
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          memory: 1G
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-semantik} -d ${POSTGRES_DB:-semantik}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    shm_size: 256mb

  # Dedicated PostgreSQL instance for integration and API tests
  postgres_test:
    image: postgres:16-alpine
    container_name: semantik-postgres-test
    profiles:
      - testing
    ports:
      - "${POSTGRES_TEST_PORT:-55432}:5432"
    environment:
      - POSTGRES_DB=${POSTGRES_TEST_DB:-semantik_test}
      - POSTGRES_USER=${POSTGRES_TEST_USER:-semantik}
      - POSTGRES_PASSWORD=${POSTGRES_TEST_PASSWORD:-semantik_test_password}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=en_US.utf8 --lc-ctype=en_US.utf8
      - PGDATA=/var/lib/postgresql/data/pgdata
    volumes:
      - postgres_test_data:/var/lib/postgresql/data
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -U ${POSTGRES_TEST_USER:-semantik} -d ${POSTGRES_TEST_DB:-semantik_test}",
        ]
      interval: 15s
      timeout: 5s
      retries: 5
      start_period: 20s
    restart: unless-stopped
    shm_size: 256mb

  # Redis message broker for Celery
  redis:
    image: redis:7-alpine
    container_name: semantik-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: ["redis-server", "--appendonly", "yes"]
    security_opt:
      - no-new-privileges:true
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          memory: 256M
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Search API Service (vecpipe)
  vecpipe:
    build:
      context: .
      dockerfile: Dockerfile
      target: runtime
    container_name: semantik-vecpipe
    user: "${UID:-1000}:${GID:-1000}"
    command: ["vecpipe"]
    ports:
      - "8000:8000"
    environment:
      # General configuration
      - ENVIRONMENT=${ENVIRONMENT:-development}
      # Qdrant configuration
      - QDRANT_HOST=qdrant
      - QDRANT_PORT=6333
      # Model defaults
      - DEFAULT_COLLECTION=${DEFAULT_COLLECTION:-work_docs}
      - USE_MOCK_EMBEDDINGS=${USE_MOCK_EMBEDDINGS:-false}
      - DEFAULT_EMBEDDING_MODEL=${DEFAULT_EMBEDDING_MODEL:-Qwen/Qwen3-Embedding-0.6B}
      - DEFAULT_QUANTIZATION=${DEFAULT_QUANTIZATION:-float16}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY:-CHANGE_THIS_TO_A_STRONG_SECRET_KEY}
      # GPU-specific settings
      - CUDA_VISIBLE_DEVICES=${CUDA_VISIBLE_DEVICES:-0}
      # Service configuration
      - SEARCH_API_PORT=8000
      - WAIT_FOR_QDRANT=true
      # HuggingFace configuration
      - HF_HOME=/app/.cache/huggingface
      - HF_HUB_OFFLINE=${HF_HUB_OFFLINE:-false}
      # Redis configuration
      - REDIS_URL=redis://redis:6379/0
      # PostgreSQL configuration
      - DATABASE_URL=${DATABASE_URL:-postgresql://${POSTGRES_USER:-semantik}:${POSTGRES_PASSWORD:-CHANGE_THIS_TO_A_STRONG_PASSWORD}@postgres:5432/${POSTGRES_DB:-semantik}}
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=${POSTGRES_DB:-semantik}
      - POSTGRES_USER=${POSTGRES_USER:-semantik}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-CHANGE_THIS_TO_A_STRONG_PASSWORD}
    volumes:
      # Mount data directories
      - ./logs:/app/logs
      # Mount HuggingFace cache for persistent model storage
      - ${HF_CACHE_DIR:-./models}:/app/.cache/huggingface
    depends_on:
      postgres:
        condition: service_healthy
      qdrant:
        condition: service_started
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 4G
        reservations:
          memory: 2G
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8000/health')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Web UI Service
  webui:
    build:
      context: .
      dockerfile: Dockerfile
      target: runtime
    container_name: semantik-webui
    user: "${UID:-1000}:${GID:-1000}"
    command: ["webui"]
    ports:
      - "8080:8080"
    environment:
      # General configuration
      - ENVIRONMENT=${ENVIRONMENT:-development}
      # Service URLs for inter-container communication
      - SEARCH_API_URL=http://vecpipe:8000
      - SEARCH_API_HOST=vecpipe
      - QDRANT_HOST=qdrant
      - QDRANT_PORT=6333
      # Model defaults
      - JWT_SECRET_KEY=${JWT_SECRET_KEY:-CHANGE_THIS_TO_A_STRONG_SECRET_KEY}
      - ACCESS_TOKEN_EXPIRE_MINUTES=${ACCESS_TOKEN_EXPIRE_MINUTES:-1440}
      - DEFAULT_COLLECTION=${DEFAULT_COLLECTION:-work_docs}
      - USE_MOCK_EMBEDDINGS=${USE_MOCK_EMBEDDINGS:-false}
      - DEFAULT_EMBEDDING_MODEL=${DEFAULT_EMBEDDING_MODEL:-Qwen/Qwen3-Embedding-0.6B}
      - DEFAULT_QUANTIZATION=${DEFAULT_QUANTIZATION:-float16}
      # Service configuration
      - WEBUI_PORT=8080
      - WAIT_FOR_SEARCH_API=true
      # HuggingFace configuration
      - HF_HOME=/app/.cache/huggingface
      - HF_HUB_OFFLINE=${HF_HUB_OFFLINE:-false}
      # Redis configuration
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      # PostgreSQL configuration
      - DATABASE_URL=${DATABASE_URL:-postgresql://${POSTGRES_USER:-semantik}:${POSTGRES_PASSWORD:-CHANGE_THIS_TO_A_STRONG_PASSWORD}@postgres:5432/${POSTGRES_DB:-semantik}}
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=${POSTGRES_DB:-semantik}
      - POSTGRES_USER=${POSTGRES_USER:-semantik}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-CHANGE_THIS_TO_A_STRONG_PASSWORD}
      # Connection pool settings
      - DB_POOL_SIZE=${DB_POOL_SIZE:-20}
      - DB_MAX_OVERFLOW=${DB_MAX_OVERFLOW:-40}
      - DB_POOL_TIMEOUT=${DB_POOL_TIMEOUT:-30}
      - DB_POOL_RECYCLE=${DB_POOL_RECYCLE:-3600}
      - DB_POOL_PRE_PING=${DB_POOL_PRE_PING:-true}
    volumes:
      # Mount data directories
      - ./data:/app/data
      - ./logs:/app/logs
      # Mount document directories for processing
      - ${DOCUMENT_PATH:-./documents}:/mnt/docs:ro
      # Mount HuggingFace cache for persistent model storage
      - ${HF_CACHE_DIR:-./models}:/app/.cache/huggingface
    depends_on:
      postgres:
        condition: service_healthy
      vecpipe:
        condition: service_started
      redis:
        condition: service_started
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 2G
        reservations:
          memory: 1G
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/health/readyz"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Celery Worker Service
  worker:
    build:
      context: .
      dockerfile: Dockerfile
      target: runtime
    container_name: semantik-worker
    command: ["worker"]
    environment:
      # Python path
      - PYTHONPATH=/app/packages
      # General configuration
      - ENVIRONMENT=${ENVIRONMENT:-development}
      # Redis configuration
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      # Qdrant configuration
      - QDRANT_HOST=qdrant
      - QDRANT_PORT=6333
      # Model defaults
      - DEFAULT_COLLECTION=${DEFAULT_COLLECTION:-work_docs}
      - USE_MOCK_EMBEDDINGS=${USE_MOCK_EMBEDDINGS:-false}
      - DEFAULT_EMBEDDING_MODEL=${DEFAULT_EMBEDDING_MODEL:-Qwen/Qwen3-Embedding-0.6B}
      - DEFAULT_QUANTIZATION=${DEFAULT_QUANTIZATION:-float16}
      # HuggingFace configuration
      - HF_HOME=/app/.cache/huggingface
      - HF_HUB_OFFLINE=${HF_HUB_OFFLINE:-false}
      # Auth configuration
      - JWT_SECRET_KEY=${JWT_SECRET_KEY:-CHANGE_THIS_TO_A_STRONG_SECRET_KEY}
      # PostgreSQL configuration
      - DATABASE_URL=${DATABASE_URL:-postgresql://${POSTGRES_USER:-semantik}:${POSTGRES_PASSWORD:-CHANGE_THIS_TO_A_STRONG_PASSWORD}@postgres:5432/${POSTGRES_DB:-semantik}}
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=${POSTGRES_DB:-semantik}
      - POSTGRES_USER=${POSTGRES_USER:-semantik}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-CHANGE_THIS_TO_A_STRONG_PASSWORD}
      # Connection pool settings
      - DB_POOL_SIZE=${DB_POOL_SIZE:-10}
      - DB_MAX_OVERFLOW=${DB_MAX_OVERFLOW:-20}
      - DB_POOL_TIMEOUT=${DB_POOL_TIMEOUT:-30}
      - DB_POOL_RECYCLE=${DB_POOL_RECYCLE:-3600}
      - DB_POOL_PRE_PING=${DB_POOL_PRE_PING:-true}
    volumes:
      # Mount data directories
      - ./data:/app/data
      - ./logs:/app/logs
      # Mount document directories for processing
      - ${DOCUMENT_PATH:-./documents}:/mnt/docs:ro
      # Mount HuggingFace cache for persistent model storage
      - ${HF_CACHE_DIR:-./models}:/app/.cache/huggingface
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
      qdrant:
        condition: service_started
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 4G
        reservations:
          memory: 2G
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "celery", "-A", "webui.celery_app", "inspect", "ping", "-d", "celery@$$HOSTNAME"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Flower monitoring service
  flower:
    build:
      context: .
      dockerfile: Dockerfile
      target: runtime
    container_name: semantik-flower
    command: ["flower"]
    profiles:
      - backend
    ports:
      - "5555:5555"
    environment:
      # Python path
      - PYTHONPATH=/app/packages
      # Redis configuration
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      # Flower configuration
      - FLOWER_PORT=5555
      - FLOWER_USERNAME=${FLOWER_USERNAME}
      - FLOWER_PASSWORD=${FLOWER_PASSWORD}
    depends_on:
      - redis
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          memory: 256M
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:5555/healthcheck"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

volumes:
  # Named volume for Qdrant data persistence
  qdrant_storage:
    driver: local
  # Named volume for PostgreSQL data persistence
  postgres_data:
    driver: local
  postgres_test_data:
    driver: local
  # Named volume for Redis data persistence
  redis_data:
    driver: local

networks:
  default:
    name: semantik-network
    driver: bridge
