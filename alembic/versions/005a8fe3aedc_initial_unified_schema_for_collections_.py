"""Initial unified schema for collections, operations, and documents

Revision ID: 005a8fe3aedc
Revises: 
Create Date: 2025-07-21 23:22:40.130363

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '005a8fe3aedc'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('users',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('username', sa.String(), nullable=False),
    sa.Column('email', sa.String(), nullable=False),
    sa.Column('full_name', sa.String(), nullable=True),
    sa.Column('hashed_password', sa.String(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('is_superuser', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('last_login', sa.DateTime(timezone=True), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_index(op.f('ix_users_username'), 'users', ['username'], unique=True)
    op.create_table('api_keys',
    sa.Column('id', sa.String(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('key_hash', sa.String(), nullable=False),
    sa.Column('permissions', sa.JSON(), nullable=True),
    sa.Column('last_used_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('expires_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_api_keys_is_active'), 'api_keys', ['is_active'], unique=False)
    op.create_index(op.f('ix_api_keys_key_hash'), 'api_keys', ['key_hash'], unique=True)
    op.create_index(op.f('ix_api_keys_user_id'), 'api_keys', ['user_id'], unique=False)
    op.create_table('collections',
    sa.Column('id', sa.String(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('owner_id', sa.Integer(), nullable=False),
    sa.Column('vector_store_name', sa.String(), nullable=False),
    sa.Column('embedding_model', sa.String(), nullable=False),
    sa.Column('quantization', sa.String(), nullable=False),
    sa.Column('chunk_size', sa.Integer(), nullable=False),
    sa.Column('chunk_overlap', sa.Integer(), nullable=False),
    sa.Column('is_public', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('meta', sa.JSON(), nullable=True),
    sa.Column('status', sa.Enum('PENDING', 'READY', 'PROCESSING', 'ERROR', 'DEGRADED', name='collection_status'), nullable=False),
    sa.Column('status_message', sa.Text(), nullable=True),
    sa.Column('qdrant_collections', sa.JSON(), nullable=True),
    sa.Column('qdrant_staging', sa.JSON(), nullable=True),
    sa.Column('document_count', sa.Integer(), nullable=False),
    sa.Column('vector_count', sa.Integer(), nullable=False),
    sa.Column('total_size_bytes', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['owner_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('vector_store_name')
    )
    op.create_index(op.f('ix_collections_is_public'), 'collections', ['is_public'], unique=False)
    op.create_index(op.f('ix_collections_name'), 'collections', ['name'], unique=True)
    op.create_index(op.f('ix_collections_owner_id'), 'collections', ['owner_id'], unique=False)
    op.create_index(op.f('ix_collections_status'), 'collections', ['status'], unique=False)
    op.create_table('refresh_tokens',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('token_hash', sa.String(), nullable=False),
    sa.Column('expires_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('is_revoked', sa.Boolean(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_refresh_tokens_token_hash'), 'refresh_tokens', ['token_hash'], unique=True)
    op.create_table('collection_permissions',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('collection_id', sa.String(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=True),
    sa.Column('api_key_id', sa.String(), nullable=True),
    sa.Column('permission', sa.Enum('READ', 'WRITE', 'ADMIN', name='permission_type'), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.CheckConstraint('(user_id IS NOT NULL AND api_key_id IS NULL) OR (user_id IS NULL AND api_key_id IS NOT NULL)', name='check_user_or_api_key'),
    sa.ForeignKeyConstraint(['api_key_id'], ['api_keys.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['collection_id'], ['collections.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_collection_permissions_api_key_id'), 'collection_permissions', ['api_key_id'], unique=False)
    op.create_index(op.f('ix_collection_permissions_collection_id'), 'collection_permissions', ['collection_id'], unique=False)
    op.create_index('ix_collection_permissions_unique_api_key', 'collection_permissions', ['collection_id', 'api_key_id'], unique=True, postgresql_where='api_key_id IS NOT NULL')
    op.create_index('ix_collection_permissions_unique_user', 'collection_permissions', ['collection_id', 'user_id'], unique=True, postgresql_where='user_id IS NOT NULL')
    op.create_index(op.f('ix_collection_permissions_user_id'), 'collection_permissions', ['user_id'], unique=False)
    op.create_table('collection_resource_limits',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('collection_id', sa.String(), nullable=False),
    sa.Column('max_documents', sa.Integer(), nullable=True),
    sa.Column('max_storage_gb', sa.Float(), nullable=True),
    sa.Column('max_operations_per_hour', sa.Integer(), nullable=True),
    sa.Column('max_sources', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['collection_id'], ['collections.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('collection_id')
    )
    op.create_table('collection_sources',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('collection_id', sa.String(), nullable=False),
    sa.Column('source_path', sa.String(), nullable=False),
    sa.Column('source_type', sa.String(), nullable=False),
    sa.Column('document_count', sa.Integer(), nullable=False),
    sa.Column('size_bytes', sa.Integer(), nullable=False),
    sa.Column('last_indexed_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('meta', sa.JSON(), nullable=True),
    sa.ForeignKeyConstraint(['collection_id'], ['collections.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('collection_id', 'source_path', name='uq_collection_source_path')
    )
    op.create_index(op.f('ix_collection_sources_collection_id'), 'collection_sources', ['collection_id'], unique=False)
    op.create_table('operations',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('uuid', sa.String(), nullable=False),
    sa.Column('collection_id', sa.String(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('type', sa.Enum('INDEX', 'APPEND', 'REINDEX', 'REMOVE_SOURCE', 'DELETE', name='operation_type'), nullable=False),
    sa.Column('status', sa.Enum('PENDING', 'PROCESSING', 'COMPLETED', 'FAILED', 'CANCELLED', name='operation_status'), nullable=False),
    sa.Column('task_id', sa.String(), nullable=True),
    sa.Column('config', sa.JSON(), nullable=False),
    sa.Column('error_message', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('started_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('completed_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('meta', sa.JSON(), nullable=True),
    sa.ForeignKeyConstraint(['collection_id'], ['collections.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('uuid')
    )
    op.create_index(op.f('ix_operations_collection_id'), 'operations', ['collection_id'], unique=False)
    op.create_index(op.f('ix_operations_created_at'), 'operations', ['created_at'], unique=False)
    op.create_index(op.f('ix_operations_status'), 'operations', ['status'], unique=False)
    op.create_index(op.f('ix_operations_type'), 'operations', ['type'], unique=False)
    op.create_index(op.f('ix_operations_user_id'), 'operations', ['user_id'], unique=False)
    op.create_table('collection_audit_log',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('collection_id', sa.String(), nullable=False),
    sa.Column('operation_id', sa.Integer(), nullable=True),
    sa.Column('user_id', sa.Integer(), nullable=True),
    sa.Column('action', sa.String(), nullable=False),
    sa.Column('details', sa.JSON(), nullable=True),
    sa.Column('ip_address', sa.String(), nullable=True),
    sa.Column('user_agent', sa.String(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['collection_id'], ['collections.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['operation_id'], ['operations.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_collection_audit_log_collection_id'), 'collection_audit_log', ['collection_id'], unique=False)
    op.create_index(op.f('ix_collection_audit_log_created_at'), 'collection_audit_log', ['created_at'], unique=False)
    op.create_index(op.f('ix_collection_audit_log_user_id'), 'collection_audit_log', ['user_id'], unique=False)
    op.create_table('documents',
    sa.Column('id', sa.String(), nullable=False),
    sa.Column('collection_id', sa.String(), nullable=False),
    sa.Column('source_id', sa.Integer(), nullable=True),
    sa.Column('file_path', sa.String(), nullable=False),
    sa.Column('file_name', sa.String(), nullable=False),
    sa.Column('file_size', sa.Integer(), nullable=False),
    sa.Column('mime_type', sa.String(), nullable=True),
    sa.Column('content_hash', sa.String(), nullable=False),
    sa.Column('status', sa.Enum('PENDING', 'PROCESSING', 'COMPLETED', 'FAILED', name='document_status'), nullable=False),
    sa.Column('error_message', sa.Text(), nullable=True),
    sa.Column('chunk_count', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('meta', sa.JSON(), nullable=True),
    sa.ForeignKeyConstraint(['collection_id'], ['collections.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['source_id'], ['collection_sources.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('ix_documents_collection_content_hash', 'documents', ['collection_id', 'content_hash'], unique=True)
    op.create_index(op.f('ix_documents_collection_id'), 'documents', ['collection_id'], unique=False)
    op.create_index(op.f('ix_documents_content_hash'), 'documents', ['content_hash'], unique=False)
    op.create_index(op.f('ix_documents_source_id'), 'documents', ['source_id'], unique=False)
    op.create_index(op.f('ix_documents_status'), 'documents', ['status'], unique=False)
    op.create_table('operation_metrics',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('operation_id', sa.Integer(), nullable=False),
    sa.Column('metric_name', sa.String(), nullable=False),
    sa.Column('metric_value', sa.Float(), nullable=False),
    sa.Column('recorded_at', sa.DateTime(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['operation_id'], ['operations.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_operation_metrics_operation_id'), 'operation_metrics', ['operation_id'], unique=False)
    op.create_index(op.f('ix_operation_metrics_recorded_at'), 'operation_metrics', ['recorded_at'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_operation_metrics_recorded_at'), table_name='operation_metrics')
    op.drop_index(op.f('ix_operation_metrics_operation_id'), table_name='operation_metrics')
    op.drop_table('operation_metrics')
    op.drop_index(op.f('ix_documents_status'), table_name='documents')
    op.drop_index(op.f('ix_documents_source_id'), table_name='documents')
    op.drop_index(op.f('ix_documents_content_hash'), table_name='documents')
    op.drop_index(op.f('ix_documents_collection_id'), table_name='documents')
    op.drop_index('ix_documents_collection_content_hash', table_name='documents')
    op.drop_table('documents')
    op.drop_index(op.f('ix_collection_audit_log_user_id'), table_name='collection_audit_log')
    op.drop_index(op.f('ix_collection_audit_log_created_at'), table_name='collection_audit_log')
    op.drop_index(op.f('ix_collection_audit_log_collection_id'), table_name='collection_audit_log')
    op.drop_table('collection_audit_log')
    op.drop_index(op.f('ix_operations_user_id'), table_name='operations')
    op.drop_index(op.f('ix_operations_type'), table_name='operations')
    op.drop_index(op.f('ix_operations_status'), table_name='operations')
    op.drop_index(op.f('ix_operations_created_at'), table_name='operations')
    op.drop_index(op.f('ix_operations_collection_id'), table_name='operations')
    op.drop_table('operations')
    op.drop_index(op.f('ix_collection_sources_collection_id'), table_name='collection_sources')
    op.drop_table('collection_sources')
    op.drop_table('collection_resource_limits')
    op.drop_index(op.f('ix_collection_permissions_user_id'), table_name='collection_permissions')
    op.drop_index('ix_collection_permissions_unique_user', table_name='collection_permissions', postgresql_where='user_id IS NOT NULL')
    op.drop_index('ix_collection_permissions_unique_api_key', table_name='collection_permissions', postgresql_where='api_key_id IS NOT NULL')
    op.drop_index(op.f('ix_collection_permissions_collection_id'), table_name='collection_permissions')
    op.drop_index(op.f('ix_collection_permissions_api_key_id'), table_name='collection_permissions')
    op.drop_table('collection_permissions')
    op.drop_index(op.f('ix_refresh_tokens_token_hash'), table_name='refresh_tokens')
    op.drop_table('refresh_tokens')
    op.drop_index(op.f('ix_collections_status'), table_name='collections')
    op.drop_index(op.f('ix_collections_owner_id'), table_name='collections')
    op.drop_index(op.f('ix_collections_name'), table_name='collections')
    op.drop_index(op.f('ix_collections_is_public'), table_name='collections')
    op.drop_table('collections')
    op.drop_index(op.f('ix_api_keys_user_id'), table_name='api_keys')
    op.drop_index(op.f('ix_api_keys_key_hash'), table_name='api_keys')
    op.drop_index(op.f('ix_api_keys_is_active'), table_name='api_keys')
    op.drop_table('api_keys')
    op.drop_index(op.f('ix_users_username'), table_name='users')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.drop_table('users')
    # ### end Alembic commands ###
