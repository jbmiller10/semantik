============================= test session starts ==============================
platform linux -- Python 3.12.3, pytest-8.4.1, pluggy-1.6.0
rootdir: /home/john/semantik
configfile: pyproject.toml
plugins: pyfakefs-5.9.1, anyio-4.9.0, cov-4.1.0, asyncio-0.23.8
asyncio: mode=Mode.AUTO
collected 1087 items

tests/unit/test_all_chunking_strategies.py ............................. [  2%]
........................................................................ [  9%]
............                                                             [ 10%]
tests/unit/test_api_key_repository.py ...............................    [ 13%]
tests/unit/test_async_sqlalchemy_patterns.py .....                       [ 13%]
tests/unit/test_auth.py ....................................             [ 17%]
tests/unit/test_auth_repository.py ...................................   [ 20%]
tests/unit/test_chunk_repository.py ..........................           [ 22%]
tests/unit/test_chunking_error_handler.py ..................             [ 24%]
tests/unit/test_chunking_error_handler_enhanced.py ............          [ 25%]
tests/unit/test_chunking_error_metrics.py ...................            [ 27%]
tests/unit/test_chunking_exception_handlers.py .................         [ 28%]
tests/unit/test_chunking_exceptions.py ...........................       [ 31%]
tests/unit/test_chunking_integration_example.py ............             [ 32%]
tests/unit/test_chunking_security.py ............                        [ 33%]
tests/unit/test_chunking_service.py .....F....FFF....F                   [ 35%]
tests/unit/test_chunking_service_errors.py EEEEEEEEEEEEEE                [ 36%]
tests/unit/test_chunking_strategies.py ..................                [ 37%]
tests/unit/test_chunking_tasks.py .........s..........                   [ 39%]
tests/unit/test_collection_repository.py .........................       [ 42%]
tests/unit/test_collection_service.py .........................          [ 44%]
tests/unit/test_collection_service_instantiation.py ....                 [ 44%]
tests/unit/test_collection_service_mock_integration.py ....              [ 45%]
tests/unit/test_correlation_middleware.py ..................             [ 46%]
tests/unit/test_dependencies.py ....                                     [ 47%]
tests/unit/test_directory_scan_service.py ........................       [ 49%]
tests/unit/test_document_repository.py ........                          [ 50%]
tests/unit/test_document_scanning_service.py .................           [ 51%]
tests/unit/test_extract_chunks.py ...........                            [ 52%]
tests/unit/test_hierarchical_chunker.py ...............................  [ 55%]
tests/unit/test_hierarchical_chunker_extended.py ....................... [ 57%]
....                                                                     [ 58%]
tests/unit/test_hierarchical_chunker_security.py ..................      [ 59%]
tests/unit/test_hybrid_chunker.py .......................                [ 61%]
tests/unit/test_hybrid_chunker_redos_protection.py ..s...........        [ 63%]
tests/unit/test_ingest_qdrant.py ...........                             [ 64%]
tests/unit/test_local_embedding_adapter.py ................              [ 65%]
tests/unit/test_model_manager.py ...............                         [ 66%]
tests/unit/test_models.py E/home/john/.cache/pypoetry/virtualenvs/document-embedding-system-bumkn4PZ-py3.12/lib/python3.12/site-packages/coverage/inorout.py:525: CoverageWarning: Module packages.webui was previously imported, but not measured (module-not-measured)
  self.warn(msg, slug="module-not-measured")


==================================== ERRORS ====================================
_ ERROR at setup of TestChunkingServiceErrorHandling.test_memory_limit_enforcement_preview _

self = <tests.unit.test_chunking_service_errors.TestChunkingServiceErrorHandling object at 0x72bfda3d6690>
mock_dependencies = {'collection_repo': <MagicMock spec='CollectionRepository' id='126168119765776'>, 'db_session': <AsyncMock spec='Async...tRepository' id='126168119766928'>, 'error_handler': <MagicMock spec='ChunkingErrorHandler' id='126168119769136'>, ...}

    @pytest.fixture()
    def chunking_service(self, mock_dependencies: dict) -> ChunkingService:
        """Create ChunkingService instance with mocked dependencies."""
>       return ChunkingService(
            db_session=mock_dependencies["db_session"],
            collection_repo=mock_dependencies["collection_repo"],
            document_repo=mock_dependencies["document_repo"],
            redis_client=mock_dependencies["redis_client"],
            security_validator=mock_dependencies["security_validator"],
            error_handler=mock_dependencies["error_handler"],
        )
E       TypeError: ChunkingService.__init__() got an unexpected keyword argument 'security_validator'

tests/unit/test_chunking_service_errors.py:62: TypeError
___ ERROR at setup of TestChunkingServiceErrorHandling.test_timeout_handling ___

self = <tests.unit.test_chunking_service_errors.TestChunkingServiceErrorHandling object at 0x72bfda3d6990>
mock_dependencies = {'collection_repo': <MagicMock spec='CollectionRepository' id='126168119330912'>, 'db_session': <AsyncMock spec='Async...tRepository' id='126168119329904'>, 'error_handler': <MagicMock spec='ChunkingErrorHandler' id='126168119342384'>, ...}

    @pytest.fixture()
    def chunking_service(self, mock_dependencies: dict) -> ChunkingService:
        """Create ChunkingService instance with mocked dependencies."""
>       return ChunkingService(
            db_session=mock_dependencies["db_session"],
            collection_repo=mock_dependencies["collection_repo"],
            document_repo=mock_dependencies["document_repo"],
            redis_client=mock_dependencies["redis_client"],
            security_validator=mock_dependencies["security_validator"],
            error_handler=mock_dependencies["error_handler"],
        )
E       TypeError: ChunkingService.__init__() got an unexpected keyword argument 'security_validator'

tests/unit/test_chunking_service_errors.py:62: TypeError
_ ERROR at setup of TestChunkingServiceErrorHandling.test_strategy_fallback_on_error _

self = <tests.unit.test_chunking_service_errors.TestChunkingServiceErrorHandling object at 0x72bfda3d6c90>
mock_dependencies = {'collection_repo': <MagicMock spec='CollectionRepository' id='126168119191328'>, 'db_session': <AsyncMock spec='Async...tRepository' id='126168123088032'>, 'error_handler': <MagicMock spec='ChunkingErrorHandler' id='126168119189504'>, ...}

    @pytest.fixture()
    def chunking_service(self, mock_dependencies: dict) -> ChunkingService:
        """Create ChunkingService instance with mocked dependencies."""
>       return ChunkingService(
            db_session=mock_dependencies["db_session"],
            collection_repo=mock_dependencies["collection_repo"],
            document_repo=mock_dependencies["document_repo"],
            redis_client=mock_dependencies["redis_client"],
            security_validator=mock_dependencies["security_validator"],
            error_handler=mock_dependencies["error_handler"],
        )
E       TypeError: ChunkingService.__init__() got an unexpected keyword argument 'security_validator'

tests/unit/test_chunking_service_errors.py:62: TypeError
_ ERROR at setup of TestChunkingServiceErrorHandling.test_validation_error_document_size _

self = <tests.unit.test_chunking_service_errors.TestChunkingServiceErrorHandling object at 0x72bfda3d6f90>
mock_dependencies = {'collection_repo': <MagicMock spec='CollectionRepository' id='126168119003712'>, 'db_session': <AsyncMock spec='Async...tRepository' id='126168119001648'>, 'error_handler': <MagicMock spec='ChunkingErrorHandler' id='126168119003184'>, ...}

    @pytest.fixture()
    def chunking_service(self, mock_dependencies: dict) -> ChunkingService:
        """Create ChunkingService instance with mocked dependencies."""
>       return ChunkingService(
            db_session=mock_dependencies["db_session"],
            collection_repo=mock_dependencies["collection_repo"],
            document_repo=mock_dependencies["document_repo"],
            redis_client=mock_dependencies["redis_client"],
            security_validator=mock_dependencies["security_validator"],
            error_handler=mock_dependencies["error_handler"],
        )
E       TypeError: ChunkingService.__init__() got an unexpected keyword argument 'security_validator'

tests/unit/test_chunking_service_errors.py:62: TypeError
_ ERROR at setup of TestChunkingServiceErrorHandling.test_validation_error_chunk_params _

self = <tests.unit.test_chunking_service_errors.TestChunkingServiceErrorHandling object at 0x72bfda3d7290>
mock_dependencies = {'collection_repo': <MagicMock spec='CollectionRepository' id='126168119079184'>, 'db_session': <AsyncMock spec='Async...tRepository' id='126168119078128'>, 'error_handler': <MagicMock spec='ChunkingErrorHandler' id='126168119075968'>, ...}

    @pytest.fixture()
    def chunking_service(self, mock_dependencies: dict) -> ChunkingService:
        """Create ChunkingService instance with mocked dependencies."""
>       return ChunkingService(
            db_session=mock_dependencies["db_session"],
            collection_repo=mock_dependencies["collection_repo"],
            document_repo=mock_dependencies["document_repo"],
            redis_client=mock_dependencies["redis_client"],
            security_validator=mock_dependencies["security_validator"],
            error_handler=mock_dependencies["error_handler"],
        )
E       TypeError: ChunkingService.__init__() got an unexpected keyword argument 'security_validator'

tests/unit/test_chunking_service_errors.py:62: TypeError
_ ERROR at setup of TestChunkingServiceErrorHandling.test_process_collection_with_partial_failure _

self = <tests.unit.test_chunking_service_errors.TestChunkingServiceErrorHandling object at 0x72bfda3d7590>
mock_dependencies = {'collection_repo': <MagicMock spec='CollectionRepository' id='126168119034128'>, 'db_session': <AsyncMock spec='Async...tRepository' id='126168119037200'>, 'error_handler': <MagicMock spec='ChunkingErrorHandler' id='126168119034224'>, ...}

    @pytest.fixture()
    def chunking_service(self, mock_dependencies: dict) -> ChunkingService:
        """Create ChunkingService instance with mocked dependencies."""
>       return ChunkingService(
            db_session=mock_dependencies["db_session"],
            collection_repo=mock_dependencies["collection_repo"],
            document_repo=mock_dependencies["document_repo"],
            redis_client=mock_dependencies["redis_client"],
            security_validator=mock_dependencies["security_validator"],
            error_handler=mock_dependencies["error_handler"],
        )
E       TypeError: ChunkingService.__init__() got an unexpected keyword argument 'security_validator'

tests/unit/test_chunking_service_errors.py:62: TypeError
_ ERROR at setup of TestChunkingServiceErrorHandling.test_resource_limit_error_concurrent_operations _

self = <tests.unit.test_chunking_service_errors.TestChunkingServiceErrorHandling object at 0x72bfda3d7890>
mock_dependencies = {'collection_repo': <MagicMock spec='CollectionRepository' id='126168118676896'>, 'db_session': <AsyncMock spec='Async...tRepository' id='126168118678000'>, 'error_handler': <MagicMock spec='ChunkingErrorHandler' id='126168118681888'>, ...}

    @pytest.fixture()
    def chunking_service(self, mock_dependencies: dict) -> ChunkingService:
        """Create ChunkingService instance with mocked dependencies."""
>       return ChunkingService(
            db_session=mock_dependencies["db_session"],
            collection_repo=mock_dependencies["collection_repo"],
            document_repo=mock_dependencies["document_repo"],
            redis_client=mock_dependencies["redis_client"],
            security_validator=mock_dependencies["security_validator"],
            error_handler=mock_dependencies["error_handler"],
        )
E       TypeError: ChunkingService.__init__() got an unexpected keyword argument 'security_validator'

tests/unit/test_chunking_service_errors.py:62: TypeError
_ ERROR at setup of TestChunkingServiceErrorHandling.test_dependency_error_redis_unavailable _

self = <tests.unit.test_chunking_service_errors.TestChunkingServiceErrorHandling object at 0x72bfda3d7b90>
mock_dependencies = {'collection_repo': <MagicMock spec='CollectionRepository' id='126168118681648'>, 'db_session': <AsyncMock spec='Async...tRepository' id='126168118689472'>, 'error_handler': <MagicMock spec='ChunkingErrorHandler' id='126168118683664'>, ...}

    @pytest.fixture()
    def chunking_service(self, mock_dependencies: dict) -> ChunkingService:
        """Create ChunkingService instance with mocked dependencies."""
>       return ChunkingService(
            db_session=mock_dependencies["db_session"],
            collection_repo=mock_dependencies["collection_repo"],
            document_repo=mock_dependencies["document_repo"],
            redis_client=mock_dependencies["redis_client"],
            security_validator=mock_dependencies["security_validator"],
            error_handler=mock_dependencies["error_handler"],
        )
E       TypeError: ChunkingService.__init__() got an unexpected keyword argument 'security_validator'

tests/unit/test_chunking_service_errors.py:62: TypeError
_ ERROR at setup of TestChunkingServiceErrorHandling.test_dependency_error_database_unavailable _

self = <tests.unit.test_chunking_service_errors.TestChunkingServiceErrorHandling object at 0x72bfda3d64e0>
mock_dependencies = {'collection_repo': <MagicMock spec='CollectionRepository' id='126168119048672'>, 'db_session': <AsyncMock spec='Async...tRepository' id='126168119037728'>, 'error_handler': <MagicMock spec='ChunkingErrorHandler' id='126168119043776'>, ...}

    @pytest.fixture()
    def chunking_service(self, mock_dependencies: dict) -> ChunkingService:
        """Create ChunkingService instance with mocked dependencies."""
>       return ChunkingService(
            db_session=mock_dependencies["db_session"],
            collection_repo=mock_dependencies["collection_repo"],
            document_repo=mock_dependencies["document_repo"],
            redis_client=mock_dependencies["redis_client"],
            security_validator=mock_dependencies["security_validator"],
            error_handler=mock_dependencies["error_handler"],
        )
E       TypeError: ChunkingService.__init__() got an unexpected keyword argument 'security_validator'

tests/unit/test_chunking_service_errors.py:62: TypeError
_ ERROR at setup of TestChunkingServiceErrorHandling.test_configuration_error_invalid_strategy_params _

self = <tests.unit.test_chunking_service_errors.TestChunkingServiceErrorHandling object at 0x72bfda3d77d0>
mock_dependencies = {'collection_repo': <MagicMock spec='CollectionRepository' id='126168119006064'>, 'db_session': <AsyncMock spec='Async...tRepository' id='126168119007360'>, 'error_handler': <MagicMock spec='ChunkingErrorHandler' id='126168119009424'>, ...}

    @pytest.fixture()
    def chunking_service(self, mock_dependencies: dict) -> ChunkingService:
        """Create ChunkingService instance with mocked dependencies."""
>       return ChunkingService(
            db_session=mock_dependencies["db_session"],
            collection_repo=mock_dependencies["collection_repo"],
            document_repo=mock_dependencies["document_repo"],
            redis_client=mock_dependencies["redis_client"],
            security_validator=mock_dependencies["security_validator"],
            error_handler=mock_dependencies["error_handler"],
        )
E       TypeError: ChunkingService.__init__() got an unexpected keyword argument 'security_validator'

tests/unit/test_chunking_service_errors.py:62: TypeError
_ ERROR at setup of TestChunkingServiceErrorHandling.test_memory_error_during_processing _

self = <tests.unit.test_chunking_service_errors.TestChunkingServiceErrorHandling object at 0x72bfda3d6ff0>
mock_dependencies = {'collection_repo': <MagicMock spec='CollectionRepository' id='126168119181872'>, 'db_session': <AsyncMock spec='Async...tRepository' id='126168119190800'>, 'error_handler': <MagicMock spec='ChunkingErrorHandler' id='126168119189168'>, ...}

    @pytest.fixture()
    def chunking_service(self, mock_dependencies: dict) -> ChunkingService:
        """Create ChunkingService instance with mocked dependencies."""
>       return ChunkingService(
            db_session=mock_dependencies["db_session"],
            collection_repo=mock_dependencies["collection_repo"],
            document_repo=mock_dependencies["document_repo"],
            redis_client=mock_dependencies["redis_client"],
            security_validator=mock_dependencies["security_validator"],
            error_handler=mock_dependencies["error_handler"],
        )
E       TypeError: ChunkingService.__init__() got an unexpected keyword argument 'security_validator'

tests/unit/test_chunking_service_errors.py:62: TypeError
_ ERROR at setup of TestChunkingServiceErrorHandling.test_error_context_propagation _

self = <tests.unit.test_chunking_service_errors.TestChunkingServiceErrorHandling object at 0x72bfda3d6720>
mock_dependencies = {'collection_repo': <MagicMock spec='CollectionRepository' id='126168119074192'>, 'db_session': <AsyncMock spec='Async...tRepository' id='126168119068000'>, 'error_handler': <MagicMock spec='ChunkingErrorHandler' id='126168119080672'>, ...}

    @pytest.fixture()
    def chunking_service(self, mock_dependencies: dict) -> ChunkingService:
        """Create ChunkingService instance with mocked dependencies."""
>       return ChunkingService(
            db_session=mock_dependencies["db_session"],
            collection_repo=mock_dependencies["collection_repo"],
            document_repo=mock_dependencies["document_repo"],
            redis_client=mock_dependencies["redis_client"],
            security_validator=mock_dependencies["security_validator"],
            error_handler=mock_dependencies["error_handler"],
        )
E       TypeError: ChunkingService.__init__() got an unexpected keyword argument 'security_validator'

tests/unit/test_chunking_service_errors.py:62: TypeError
_ ERROR at setup of TestChunkingServiceErrorHandling.test_validate_collection_config_with_errors _

self = <tests.unit.test_chunking_service_errors.TestChunkingServiceErrorHandling object at 0x72bfda3d7f50>
mock_dependencies = {'collection_repo': <MagicMock spec='CollectionRepository' id='126168118784368'>, 'db_session': <AsyncMock spec='Async...tRepository' id='126168118783120'>, 'error_handler': <MagicMock spec='ChunkingErrorHandler' id='126168122704192'>, ...}

    @pytest.fixture()
    def chunking_service(self, mock_dependencies: dict) -> ChunkingService:
        """Create ChunkingService instance with mocked dependencies."""
>       return ChunkingService(
            db_session=mock_dependencies["db_session"],
            collection_repo=mock_dependencies["collection_repo"],
            document_repo=mock_dependencies["document_repo"],
            redis_client=mock_dependencies["redis_client"],
            security_validator=mock_dependencies["security_validator"],
            error_handler=mock_dependencies["error_handler"],
        )
E       TypeError: ChunkingService.__init__() got an unexpected keyword argument 'security_validator'

tests/unit/test_chunking_service_errors.py:62: TypeError
_ ERROR at setup of TestChunkingServiceErrorHandling.test_cleanup_after_error __

self = <tests.unit.test_chunking_service_errors.TestChunkingServiceErrorHandling object at 0x72bfda3f4290>
mock_dependencies = {'collection_repo': <MagicMock spec='CollectionRepository' id='126168119334032'>, 'db_session': <AsyncMock spec='Async...tRepository' id='126168119340800'>, 'error_handler': <MagicMock spec='ChunkingErrorHandler' id='126168119341472'>, ...}

    @pytest.fixture()
    def chunking_service(self, mock_dependencies: dict) -> ChunkingService:
        """Create ChunkingService instance with mocked dependencies."""
>       return ChunkingService(
            db_session=mock_dependencies["db_session"],
            collection_repo=mock_dependencies["collection_repo"],
            document_repo=mock_dependencies["document_repo"],
            redis_client=mock_dependencies["redis_client"],
            security_validator=mock_dependencies["security_validator"],
            error_handler=mock_dependencies["error_handler"],
        )
E       TypeError: ChunkingService.__init__() got an unexpected keyword argument 'security_validator'

tests/unit/test_chunking_service_errors.py:62: TypeError
_ ERROR at setup of TestDateTimeTimezoneAwareness.test_user_datetime_fields_are_timezone_aware _

self = <sqlalchemy.engine.base.Connection object at 0x72bfcca35700>
engine = Engine(postgresql+psycopg2://semantik:***@localhost:5432/semantik)
connection = None, _has_events = None, _allow_revalidate = True
_allow_autobegin = True

    def __init__(
        self,
        engine: Engine,
        connection: Optional[PoolProxiedConnection] = None,
        _has_events: Optional[bool] = None,
        _allow_revalidate: bool = True,
        _allow_autobegin: bool = True,
    ):
        """Construct a new Connection."""
        self.engine = engine
        self.dialect = dialect = engine.dialect
    
        if connection is None:
            try:
>               self._dbapi_connection = engine.raw_connection()
                                         ^^^^^^^^^^^^^^^^^^^^^^^

../.cache/pypoetry/virtualenvs/document-embedding-system-bumkn4PZ-py3.12/lib/python3.12/site-packages/sqlalchemy/engine/base.py:145: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../.cache/pypoetry/virtualenvs/document-embedding-system-bumkn4PZ-py3.12/lib/python3.12/site-packages/sqlalchemy/engine/base.py:3297: in raw_connection
    return self.pool.connect()
           ^^^^^^^^^^^^^^^^^^^
../.cache/pypoetry/virtualenvs/document-embedding-system-bumkn4PZ-py3.12/lib/python3.12/site-packages/sqlalchemy/pool/base.py:449: in connect
    return _ConnectionFairy._checkout(self)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
../.cache/pypoetry/virtualenvs/document-embedding-system-bumkn4PZ-py3.12/lib/python3.12/site-packages/sqlalchemy/pool/base.py:1264: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
../.cache/pypoetry/virtualenvs/document-embedding-system-bumkn4PZ-py3.12/lib/python3.12/site-packages/sqlalchemy/pool/base.py:713: in checkout
    rec = pool._do_get()
          ^^^^^^^^^^^^^^
../.cache/pypoetry/virtualenvs/document-embedding-system-bumkn4PZ-py3.12/lib/python3.12/site-packages/sqlalchemy/pool/impl.py:179: in _do_get
    with util.safe_reraise():
../.cache/pypoetry/virtualenvs/document-embedding-system-bumkn4PZ-py3.12/lib/python3.12/site-packages/sqlalchemy/util/langhelpers.py:224: in __exit__
    raise exc_value.with_traceback(exc_tb)
../.cache/pypoetry/virtualenvs/document-embedding-system-bumkn4PZ-py3.12/lib/python3.12/site-packages/sqlalchemy/pool/impl.py:177: in _do_get
    return self._create_connection()
           ^^^^^^^^^^^^^^^^^^^^^^^^^
../.cache/pypoetry/virtualenvs/document-embedding-system-bumkn4PZ-py3.12/lib/python3.12/site-packages/sqlalchemy/pool/base.py:390: in _create_connection
    return _ConnectionRecord(self)
           ^^^^^^^^^^^^^^^^^^^^^^^
../.cache/pypoetry/virtualenvs/document-embedding-system-bumkn4PZ-py3.12/lib/python3.12/site-packages/sqlalchemy/pool/base.py:675: in __init__
    self.__connect()
../.cache/pypoetry/virtualenvs/document-embedding-system-bumkn4PZ-py3.12/lib/python3.12/site-packages/sqlalchemy/pool/base.py:901: in __connect
    with util.safe_reraise():
../.cache/pypoetry/virtualenvs/document-embedding-system-bumkn4PZ-py3.12/lib/python3.12/site-packages/sqlalchemy/util/langhelpers.py:224: in __exit__
    raise exc_value.with_traceback(exc_tb)
../.cache/pypoetry/virtualenvs/document-embedding-system-bumkn4PZ-py3.12/lib/python3.12/site-packages/sqlalchemy/pool/base.py:897: in __connect
    self.dbapi_connection = connection = pool._invoke_creator(self)
                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^
../.cache/pypoetry/virtualenvs/document-embedding-system-bumkn4PZ-py3.12/lib/python3.12/site-packages/sqlalchemy/engine/create.py:646: in connect
    return dialect.connect(*cargs, **cparams)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
../.cache/pypoetry/virtualenvs/document-embedding-system-bumkn4PZ-py3.12/lib/python3.12/site-packages/sqlalchemy/engine/default.py:625: in connect
    return self.loaded_dbapi.connect(*cargs, **cparams)  # type: ignore[no-any-return]  # NOQA: E501
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost dbname=semantik user=semantik port=5432'
connection_factory = None, cursor_factory = None
kwargs = {'dbname': 'semantik', 'host': 'localhost', 'port': 5432, 'user': 'semantik'}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       psycopg2.OperationalError: connection to server at "localhost" (127.0.0.1), port 5432 failed: fe_sendauth: no password supplied

../.cache/pypoetry/virtualenvs/document-embedding-system-bumkn4PZ-py3.12/lib/python3.12/site-packages/psycopg2/__init__.py:122: OperationalError

The above exception was the direct cause of the following exception:

    @pytest.fixture()
    def db_session() -> Generator[Session, None, None]:
        """Create a PostgreSQL database session for testing."""
        import os
    
        from packages.shared.config.postgres import postgres_config
    
        # Use PostgreSQL for tests - get URL from environment or config
        database_url = os.environ.get("DATABASE_URL")
        if not database_url:
            # Use sync version for non-async tests
            database_url = postgres_config.sync_database_url
        elif database_url.startswith("postgresql://"):
            # Ensure using sync driver
            database_url = database_url.replace("postgresql://", "postgresql+psycopg2://", 1)
    
        engine = create_engine(database_url)
    
        # Helper function to drop views before tables
        def drop_views_and_tables(connection):
            # Drop views first (in dependency order)
            views_to_drop = [
                "DROP VIEW IF EXISTS partition_hot_spots CASCADE",
                "DROP VIEW IF EXISTS partition_health_summary CASCADE",
                "DROP VIEW IF EXISTS partition_size_distribution CASCADE",
                "DROP VIEW IF EXISTS partition_chunk_distribution CASCADE",
                "DROP VIEW IF EXISTS active_chunking_configs CASCADE",
                "DROP MATERIALIZED VIEW IF EXISTS collection_chunking_stats CASCADE",
            ]
    
            for view_sql in views_to_drop:
                connection.execute(text(view_sql))
    
            # Now drop all tables
            Base.metadata.drop_all(connection)
    
        # Drop all views and tables, then recreate for test isolation
>       with engine.begin() as conn:

tests/unit/test_models.py:68: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.12/contextlib.py:137: in __enter__
    return next(self.gen)
           ^^^^^^^^^^^^^^
../.cache/pypoetry/virtualenvs/document-embedding-system-bumkn4PZ-py3.12/lib/python3.12/site-packages/sqlalchemy/engine/base.py:3237: in begin
    with self.connect() as conn:
         ^^^^^^^^^^^^^^
../.cache/pypoetry/virtualenvs/document-embedding-system-bumkn4PZ-py3.12/lib/python3.12/site-packages/sqlalchemy/engine/base.py:3273: in connect
    return self._connection_cls(self)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
../.cache/pypoetry/virtualenvs/document-embedding-system-bumkn4PZ-py3.12/lib/python3.12/site-packages/sqlalchemy/engine/base.py:147: in __init__
    Connection._handle_dbapi_exception_noconnection(
../.cache/pypoetry/virtualenvs/document-embedding-system-bumkn4PZ-py3.12/lib/python3.12/site-packages/sqlalchemy/engine/base.py:2436: in _handle_dbapi_exception_noconnection
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
../.cache/pypoetry/virtualenvs/document-embedding-system-bumkn4PZ-py3.12/lib/python3.12/site-packages/sqlalchemy/engine/base.py:145: in __init__
    self._dbapi_connection = engine.raw_connection()
                             ^^^^^^^^^^^^^^^^^^^^^^^
../.cache/pypoetry/virtualenvs/document-embedding-system-bumkn4PZ-py3.12/lib/python3.12/site-packages/sqlalchemy/engine/base.py:3297: in raw_connection
    return self.pool.connect()
           ^^^^^^^^^^^^^^^^^^^
../.cache/pypoetry/virtualenvs/document-embedding-system-bumkn4PZ-py3.12/lib/python3.12/site-packages/sqlalchemy/pool/base.py:449: in connect
    return _ConnectionFairy._checkout(self)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
../.cache/pypoetry/virtualenvs/document-embedding-system-bumkn4PZ-py3.12/lib/python3.12/site-packages/sqlalchemy/pool/base.py:1264: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
../.cache/pypoetry/virtualenvs/document-embedding-system-bumkn4PZ-py3.12/lib/python3.12/site-packages/sqlalchemy/pool/base.py:713: in checkout
    rec = pool._do_get()
          ^^^^^^^^^^^^^^
../.cache/pypoetry/virtualenvs/document-embedding-system-bumkn4PZ-py3.12/lib/python3.12/site-packages/sqlalchemy/pool/impl.py:179: in _do_get
    with util.safe_reraise():
../.cache/pypoetry/virtualenvs/document-embedding-system-bumkn4PZ-py3.12/lib/python3.12/site-packages/sqlalchemy/util/langhelpers.py:224: in __exit__
    raise exc_value.with_traceback(exc_tb)
../.cache/pypoetry/virtualenvs/document-embedding-system-bumkn4PZ-py3.12/lib/python3.12/site-packages/sqlalchemy/pool/impl.py:177: in _do_get
    return self._create_connection()
           ^^^^^^^^^^^^^^^^^^^^^^^^^
../.cache/pypoetry/virtualenvs/document-embedding-system-bumkn4PZ-py3.12/lib/python3.12/site-packages/sqlalchemy/pool/base.py:390: in _create_connection
    return _ConnectionRecord(self)
           ^^^^^^^^^^^^^^^^^^^^^^^
../.cache/pypoetry/virtualenvs/document-embedding-system-bumkn4PZ-py3.12/lib/python3.12/site-packages/sqlalchemy/pool/base.py:675: in __init__
    self.__connect()
../.cache/pypoetry/virtualenvs/document-embedding-system-bumkn4PZ-py3.12/lib/python3.12/site-packages/sqlalchemy/pool/base.py:901: in __connect
    with util.safe_reraise():
../.cache/pypoetry/virtualenvs/document-embedding-system-bumkn4PZ-py3.12/lib/python3.12/site-packages/sqlalchemy/util/langhelpers.py:224: in __exit__
    raise exc_value.with_traceback(exc_tb)
../.cache/pypoetry/virtualenvs/document-embedding-system-bumkn4PZ-py3.12/lib/python3.12/site-packages/sqlalchemy/pool/base.py:897: in __connect
    self.dbapi_connection = connection = pool._invoke_creator(self)
                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^
../.cache/pypoetry/virtualenvs/document-embedding-system-bumkn4PZ-py3.12/lib/python3.12/site-packages/sqlalchemy/engine/create.py:646: in connect
    return dialect.connect(*cargs, **cparams)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
../.cache/pypoetry/virtualenvs/document-embedding-system-bumkn4PZ-py3.12/lib/python3.12/site-packages/sqlalchemy/engine/default.py:625: in connect
    return self.loaded_dbapi.connect(*cargs, **cparams)  # type: ignore[no-any-return]  # NOQA: E501
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost dbname=semantik user=semantik port=5432'
connection_factory = None, cursor_factory = None
kwargs = {'dbname': 'semantik', 'host': 'localhost', 'port': 5432, 'user': 'semantik'}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at "localhost" (127.0.0.1), port 5432 failed: fe_sendauth: no password supplied
E       
E       (Background on this error at: https://sqlalche.me/e/20/e3q8)

../.cache/pypoetry/virtualenvs/document-embedding-system-bumkn4PZ-py3.12/lib/python3.12/site-packages/psycopg2/__init__.py:122: OperationalError
=================================== FAILURES ===================================
_____________ TestChunkingService.test_preview_chunking_size_limit _____________

self = <tests.unit.test_chunking_service.TestChunkingService object at 0x72bfda5a7d70>
chunking_service = <packages.webui.services.chunking_service.ChunkingService object at 0x72bfce0737d0>

    async def test_preview_chunking_size_limit(
        self,
        chunking_service: ChunkingService,
    ) -> None:
        """Test chunking preview size limit."""
        # Text larger than preview limit (1MB)
        large_text = "x" * (2 * 1024 * 1024)  # 2MB
    
>       with pytest.raises(ValidationError, match="Document too large"):
E       Failed: DID NOT RAISE <class 'packages.webui.services.chunking_security.ValidationError'>

tests/unit/test_chunking_service.py:187: Failed
_______________ TestChunkingService.test_get_chunking_statistics _______________

self = <tests.unit.test_chunking_service.TestChunkingService object at 0x72bfda3d4e30>
chunking_service = <packages.webui.services.chunking_service.ChunkingService object at 0x72bfce589070>

    async def test_get_chunking_statistics(
        self,
        chunking_service: ChunkingService,
    ) -> None:
        """Test getting chunking statistics."""
        # Mock document data
        mock_documents = []
        for _ in range(100):
            doc = MagicMock()
            doc.chunk_count = 10  # 100 docs * 10 chunks = 1000 total
            doc.created_at = datetime.now(tz=UTC)
            mock_documents.append(doc)
    
        # Mock the db query result
        mock_result = MagicMock()
        mock_result.scalars.return_value.all.return_value = mock_documents
>       chunking_service.db.execute = AsyncMock(return_value=mock_result)
        ^^^^^^^^^^^^^^^^^^^
E       AttributeError: 'ChunkingService' object has no attribute 'db'

tests/unit/test_chunking_service.py:290: AttributeError
___________ TestChunkingService.test_validate_config_for_collection ____________

self = <tests.unit.test_chunking_service.TestChunkingService object at 0x72bfda3d5190>
chunking_service = <packages.webui.services.chunking_service.ChunkingService object at 0x72bfcde6d6a0>
mock_repos = (<MagicMock id='126168119258544'>, <MagicMock id='126168118839248'>)

    async def test_validate_config_for_collection(
        self,
        chunking_service: ChunkingService,
        mock_repos: tuple[MagicMock, MagicMock],
    ) -> None:
        """Test validating config for collection."""
        _, document_repo = mock_repos
    
        # Mock documents
        mock_docs = [
            MagicMock(file_name="doc1.txt", file_size_bytes=1000),
            MagicMock(file_name="doc2.txt", file_size_bytes=2000),
        ]
        document_repo.list_by_collection.return_value = (mock_docs, 2)
    
        config = {
            "strategy": "recursive",
            "params": {"chunk_size": 600, "chunk_overlap": 100},
        }
    
>       result = await chunking_service.validate_config_for_collection(
            collection_id="test-collection",
            strategy="recursive",
            config=config,
            sample_size=2,
        )
E       TypeError: ChunkingService.validate_config_for_collection() got an unexpected keyword argument 'sample_size'

tests/unit/test_chunking_service.py:323: TypeError
___________ TestChunkingService.test_validate_config_invalid_params ____________

self = <tests.unit.test_chunking_service.TestChunkingService object at 0x72bfda3d54c0>
chunking_service = <packages.webui.services.chunking_service.ChunkingService object at 0x72bfcde8f980>

    async def test_validate_config_invalid_params(
        self,
        chunking_service: ChunkingService,
    ) -> None:
        """Test config validation with invalid parameters."""
        config = {
            "strategy": "recursive",
            "params": {"chunk_size": 100000},  # Too large
        }
    
        with pytest.raises(ValidationError):
>           await chunking_service.validate_config_for_collection(
                collection_id="test-collection",
                strategy="recursive",
                config=config,
            )

tests/unit/test_chunking_service.py:347: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <packages.webui.services.chunking_service.ChunkingService object at 0x72bfcde8f980>
collection_id = 'test-collection', strategy = 'recursive'
config = {'params': {'chunk_size': 100000}, 'strategy': 'recursive'}

    async def validate_config_for_collection(
        self, collection_id: str, strategy: str, config: dict[str, Any]
    ) -> dict[str, Any]:
        """Validate chunking configuration for a collection.
    
        Args:
            collection_id: ID of the collection
            strategy: Chunking strategy
            config: Configuration to validate
    
        Returns:
            Validation results
        """
        try:
            # Get collection
>           collection = await self.collection_repo.get_by_id(collection_id)
                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E           TypeError: object MagicMock can't be used in 'await' expression

packages/webui/services/chunking_service.py:567: TypeError
------------------------------ Captured log call -------------------------------
ERROR    packages.webui.services.chunking_service:chunking_service.py:587 Failed to validate config: object MagicMock can't be used in 'await' expression
________________ TestChunkingService.test_get_chunking_progress ________________

self = <tests.unit.test_chunking_service.TestChunkingService object at 0x72bfda3d5c40>
chunking_service = <packages.webui.services.chunking_service.ChunkingService object at 0x72bfcdfd32c0>

    async def test_get_chunking_progress(
        self,
        chunking_service: ChunkingService,
    ) -> None:
        """Test getting chunking progress."""
        # Mock the operation repository to return an operation
        mock_operation = MagicMock()
        mock_operation.status.value = "processing"
        mock_operation.started_at = datetime.now(UTC)
        mock_operation.completed_at = None
        mock_operation.meta = {
            "progress": {
                "total_documents": 100,
                "documents_processed": 50,
                "chunks_created": 250,
                "current_document": "test.txt",
                "errors": [],
            }
        }
    
        chunking_service.operation_repo.get_by_uuid_with_permission_check.return_value = mock_operation
    
        # Call with operation_id and user_id
>       progress = await chunking_service.get_chunking_progress("test-operation", 1)
                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       TypeError: ChunkingService.get_chunking_progress() takes 2 positional arguments but 3 were given

tests/unit/test_chunking_service.py:465: TypeError
=============================== warnings summary ===============================
tests/unit/test_all_chunking_strategies.py:476
  /home/john/semantik/tests/unit/test_all_chunking_strategies.py:476: PytestUnknownMarkWarning: Unknown pytest.mark.integration - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.integration()

../.cache/pypoetry/virtualenvs/document-embedding-system-bumkn4PZ-py3.12/lib/python3.12/site-packages/passlib/utils/__init__.py:854
  /home/john/.cache/pypoetry/virtualenvs/document-embedding-system-bumkn4PZ-py3.12/lib/python3.12/site-packages/passlib/utils/__init__.py:854: DeprecationWarning: 'crypt' is deprecated and slated for removal in Python 3.13
    from crypt import crypt as _crypt

../.cache/pypoetry/virtualenvs/document-embedding-system-bumkn4PZ-py3.12/lib/python3.12/site-packages/pydantic/_internal/_config.py:323
../.cache/pypoetry/virtualenvs/document-embedding-system-bumkn4PZ-py3.12/lib/python3.12/site-packages/pydantic/_internal/_config.py:323
../.cache/pypoetry/virtualenvs/document-embedding-system-bumkn4PZ-py3.12/lib/python3.12/site-packages/pydantic/_internal/_config.py:323
../.cache/pypoetry/virtualenvs/document-embedding-system-bumkn4PZ-py3.12/lib/python3.12/site-packages/pydantic/_internal/_config.py:323
../.cache/pypoetry/virtualenvs/document-embedding-system-bumkn4PZ-py3.12/lib/python3.12/site-packages/pydantic/_internal/_config.py:323
../.cache/pypoetry/virtualenvs/document-embedding-system-bumkn4PZ-py3.12/lib/python3.12/site-packages/pydantic/_internal/_config.py:323
  /home/john/.cache/pypoetry/virtualenvs/document-embedding-system-bumkn4PZ-py3.12/lib/python3.12/site-packages/pydantic/_internal/_config.py:323: PydanticDeprecatedSince20: Support for class-based `config` is deprecated, use ConfigDict instead. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/
    warnings.warn(DEPRECATION_MESSAGE, DeprecationWarning)

tests/unit/test_api_key_repository.py::TestApiKeyRepositoryEdgeCases::test_create_api_key_empty_permissions
  /home/john/semantik/packages/webui/repositories/postgres/api_key_repository.py:79: RuntimeWarning: coroutine 'AsyncMockMixin._execute_mock_call' was never awaited
    self.session.add(api_key_record)
  Enable tracemalloc to get traceback where the object was allocated.
  See https://docs.pytest.org/en/stable/how-to/capture-warnings.html#resource-warnings for more info.

tests/unit/test_auth_repository.py::TestAuthRepositoryEdgeCases::test_save_refresh_token_with_none_expires
tests/unit/test_auth_repository.py::TestAuthRepositoryEdgeCases::test_token_operations_with_very_long_user_id
  /home/john/semantik/packages/webui/repositories/postgres/auth_repository.py:55: RuntimeWarning: coroutine 'AsyncMockMixin._execute_mock_call' was never awaited
    self.session.add(refresh_token)
  Enable tracemalloc to get traceback where the object was allocated.
  See https://docs.pytest.org/en/stable/how-to/capture-warnings.html#resource-warnings for more info.

tests/unit/test_auth_repository.py::TestAuthRepositoryEdgeCases::test_concurrent_token_operations
  /home/john/semantik/tests/unit/test_auth_repository.py:409: RuntimeWarning: coroutine 'AsyncMockMixin._execute_mock_call' was never awaited
    await auth_repo.revoke_refresh_token("token1")
  Enable tracemalloc to get traceback where the object was allocated.
  See https://docs.pytest.org/en/stable/how-to/capture-warnings.html#resource-warnings for more info.

tests/unit/test_auth_repository.py::TestAuthRepositoryEdgeCases::test_concurrent_token_operations
  /home/john/semantik/tests/unit/test_auth_repository.py:410: RuntimeWarning: coroutine 'AsyncMockMixin._execute_mock_call' was never awaited
    await auth_repo.revoke_refresh_token("token1")  # Same token
  Enable tracemalloc to get traceback where the object was allocated.
  See https://docs.pytest.org/en/stable/how-to/capture-warnings.html#resource-warnings for more info.

tests/unit/test_chunking_tasks.py::TestProgressTracking::test_send_progress_update
  /home/john/semantik/packages/webui/chunking_tasks.py:1103: RuntimeWarning: coroutine 'AsyncMockMixin._execute_mock_call' was never awaited
    redis_client.xadd(stream_key, update)
  Enable tracemalloc to get traceback where the object was allocated.
  See https://docs.pytest.org/en/stable/how-to/capture-warnings.html#resource-warnings for more info.

tests/unit/test_chunking_tasks.py::TestProgressTracking::test_send_progress_update
  /home/john/semantik/packages/webui/chunking_tasks.py:1106: RuntimeWarning: coroutine 'AsyncMockMixin._execute_mock_call' was never awaited
    redis_client.expire(stream_key, 3600)
  Enable tracemalloc to get traceback where the object was allocated.
  See https://docs.pytest.org/en/stable/how-to/capture-warnings.html#resource-warnings for more info.

tests/unit/test_collection_repository.py::TestCollectionRepository::test_get_by_uuid
  /usr/lib/python3.12/unittest/mock.py:2188: RuntimeWarning: coroutine 'AsyncMockMixin._execute_mock_call' was never awaited
    def __init__(self, name, parent):
  Enable tracemalloc to get traceback where the object was allocated.
  See https://docs.pytest.org/en/stable/how-to/capture-warnings.html#resource-warnings for more info.

tests/unit/test_document_repository.py::TestDocumentRepository::test_create_document_deduplication_logic
  /home/john/semantik/packages/shared/database/db_retry.py:41: RuntimeWarning: coroutine 'AsyncMockMixin._execute_mock_call' was never awaited
    return await func(*args, **kwargs)
  Enable tracemalloc to get traceback where the object was allocated.
  See https://docs.pytest.org/en/stable/how-to/capture-warnings.html#resource-warnings for more info.

tests/unit/test_document_repository.py::TestDocumentRepository::test_get_by_id_calls_correct_query
  /home/john/semantik/tests/unit/test_document_repository.py:146: RuntimeWarning: coroutine 'AsyncMockMixin._execute_mock_call' was never awaited
    await repository.get_by_id(doc_id)
  Enable tracemalloc to get traceback where the object was allocated.
  See https://docs.pytest.org/en/stable/how-to/capture-warnings.html#resource-warnings for more info.

tests/unit/test_local_embedding_adapter.py::TestLocalEmbeddingAdapter::test_aget_query_embedding_failure
  /usr/lib/python3.12/unittest/mock.py:1095: RuntimeWarning: coroutine 'AsyncMockMixin._execute_mock_call' was never awaited
    def _try_iter(obj):
  Enable tracemalloc to get traceback where the object was allocated.
  See https://docs.pytest.org/en/stable/how-to/capture-warnings.html#resource-warnings for more info.

tests/unit/test_model_manager.py::TestAutoUnloading::test_auto_unloading
  /home/john/semantik/packages/vecpipe/model_manager.py:136: RuntimeWarning: coroutine 'AsyncMockMixin._execute_mock_call' was never awaited
    gc.collect()
  Enable tracemalloc to get traceback where the object was allocated.
  See https://docs.pytest.org/en/stable/how-to/capture-warnings.html#resource-warnings for more info.

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html

---------- coverage: platform linux, python 3.12.3-final-0 -----------
Name                                                              Stmts   Miss  Cover
-------------------------------------------------------------------------------------
packages/vecpipe/__init__.py                                          0      0   100%
packages/vecpipe/document_tracker.py                                 66     66     0%
packages/vecpipe/embed_chunks_unified.py                            128    128     0%
packages/vecpipe/hybrid_search.py                                    72     58    19%
packages/vecpipe/ingest_qdrant.py                                   102     39    62%
packages/vecpipe/maintenance.py                                     197    197     0%
packages/vecpipe/memory_utils.py                                     57     47    18%
packages/vecpipe/model_manager.py                                   215     63    71%
packages/vecpipe/qwen3_search_config.py                              37     25    32%
packages/vecpipe/reranker.py                                        138    120    13%
packages/vecpipe/search_api.py                                      674    563    16%
packages/vecpipe/search_utils.py                                     14      9    36%
packages/vecpipe/validate_search_setup.py                           116    116     0%
packages/webui/__init__.py                                            6      6     0%
packages/webui/api/__init__.py                                        2      2     0%
packages/webui/api/auth.py                                           62     62     0%
packages/webui/api/chunking_exception_handlers.py                    64      0   100%
packages/webui/api/chunking_exceptions.py                            92      0   100%
packages/webui/api/chunking_integration_example.py                   17      0   100%
packages/webui/api/health.py                                        122     98    20%
packages/webui/api/internal.py                                       78     43    45%
packages/webui/api/metrics.py                                        58     21    64%
packages/webui/api/models.py                                          8      1    88%
packages/webui/api/root.py                                           32     14    56%
packages/webui/api/schemas.py                                       228     15    93%
packages/webui/api/settings.py                                       74     54    27%
packages/webui/api/v2/__init__.py                                     6      0   100%
packages/webui/api/v2/chunking.py                                   239    178    26%
packages/webui/api/v2/chunking_schemas.py                           249      9    96%
packages/webui/api/v2/collections.py                                191    154    19%
packages/webui/api/v2/directory_scan.py                              65     47    28%
packages/webui/api/v2/documents.py                                   44     29    34%
packages/webui/api/v2/operations.py                                 106     85    20%
packages/webui/api/v2/partition_monitoring.py                        61     44    28%
packages/webui/api/v2/schemas.py                                     60      7    88%
packages/webui/api/v2/search.py                                      43     25    42%
packages/webui/api/v2/system.py                                      18      9    50%
packages/webui/app.py                                                 2      2     0%
packages/webui/auth.py                                              127    127     0%
packages/webui/background_tasks.py                                  135    106    21%
packages/webui/celery_app.py                                         12      1    92%
packages/webui/chunking_tasks.py                                    322     84    74%
packages/webui/config/__init__.py                                     2      0   100%
packages/webui/config/rate_limits.py                                 37      9    76%
packages/webui/dependencies.py                                       32      6    81%
packages/webui/main.py                                              158    158     0%
packages/webui/middleware/__init__.py                                 2      0   100%
packages/webui/middleware/correlation.py                             70      0   100%
packages/webui/middleware/rate_limit.py                              33     21    36%
packages/webui/rate_limiter.py                                      108     84    22%
packages/webui/schemas.py                                             8      8     0%
packages/webui/services/__init__.py                                   3      0   100%
packages/webui/services/chunking_config.py                           82     82     0%
packages/webui/services/chunking_constants.py                        64      0   100%
packages/webui/services/chunking_error_handler.py                   413     87    79%
packages/webui/services/chunking_error_handler_usage_example.py      82     82     0%
packages/webui/services/chunking_error_metrics.py                    46      0   100%
packages/webui/services/chunking_security.py                        154     21    86%
packages/webui/services/chunking_service.py                         326    139    57%
packages/webui/services/chunking_strategies.py                       22      0   100%
packages/webui/services/chunking_strategy_service.py                 49     35    29%
packages/webui/services/chunking_validation.py                       64     45    30%
packages/webui/services/collection_service.py                       144     24    83%
packages/webui/services/directory_scan_service.py                   154      4    97%
packages/webui/services/document_scanning_service.py                124     24    81%
packages/webui/services/factory.py                                   55     21    62%
packages/webui/services/operation_service.py                         26     14    46%
packages/webui/services/partition_monitoring_service.py             129     77    40%
packages/webui/services/resource_manager.py                         139    117    16%
packages/webui/services/search_service.py                           122    104    15%
packages/webui/startup_tasks.py                                      20     13    35%
packages/webui/tasks.py                                            1072   1072     0%
packages/webui/utils/__init__.py                                      0      0   100%
packages/webui/utils/qdrant_manager.py                               65     65     0%
packages/webui/utils/retry.py                                        50     50     0%
packages/webui/websocket_manager.py                                 383    383     0%
-------------------------------------------------------------------------------------
TOTAL                                                              8577   5399    37%
Coverage HTML written to dir htmlcov
Coverage XML written to file coverage.xml

=========================== short test summary info ============================
FAILED tests/unit/test_chunking_service.py::TestChunkingService::test_preview_chunking_size_limit
FAILED tests/unit/test_chunking_service.py::TestChunkingService::test_get_chunking_statistics
FAILED tests/unit/test_chunking_service.py::TestChunkingService::test_validate_config_for_collection
FAILED tests/unit/test_chunking_service.py::TestChunkingService::test_validate_config_invalid_params
FAILED tests/unit/test_chunking_service.py::TestChunkingService::test_get_chunking_progress
ERROR tests/unit/test_chunking_service_errors.py::TestChunkingServiceErrorHandling::test_memory_limit_enforcement_preview
ERROR tests/unit/test_chunking_service_errors.py::TestChunkingServiceErrorHandling::test_timeout_handling
ERROR tests/unit/test_chunking_service_errors.py::TestChunkingServiceErrorHandling::test_strategy_fallback_on_error
ERROR tests/unit/test_chunking_service_errors.py::TestChunkingServiceErrorHandling::test_validation_error_document_size
ERROR tests/unit/test_chunking_service_errors.py::TestChunkingServiceErrorHandling::test_validation_error_chunk_params
ERROR tests/unit/test_chunking_service_errors.py::TestChunkingServiceErrorHandling::test_process_collection_with_partial_failure
ERROR tests/unit/test_chunking_service_errors.py::TestChunkingServiceErrorHandling::test_resource_limit_error_concurrent_operations
ERROR tests/unit/test_chunking_service_errors.py::TestChunkingServiceErrorHandling::test_dependency_error_redis_unavailable
ERROR tests/unit/test_chunking_service_errors.py::TestChunkingServiceErrorHandling::test_dependency_error_database_unavailable
ERROR tests/unit/test_chunking_service_errors.py::TestChunkingServiceErrorHandling::test_configuration_error_invalid_strategy_params
ERROR tests/unit/test_chunking_service_errors.py::TestChunkingServiceErrorHandling::test_memory_error_during_processing
ERROR tests/unit/test_chunking_service_errors.py::TestChunkingServiceErrorHandling::test_error_context_propagation
ERROR tests/unit/test_chunking_service_errors.py::TestChunkingServiceErrorHandling::test_validate_collection_config_with_errors
ERROR tests/unit/test_chunking_service_errors.py::TestChunkingServiceErrorHandling::test_cleanup_after_error
ERROR tests/unit/test_models.py::TestDateTimeTimezoneAwareness::test_user_datetime_fields_are_timezone_aware
!!!!!!!!!!!!!!!!!!!!!!!!!! stopping after 20 failures !!!!!!!!!!!!!!!!!!!!!!!!!!
====== 5 failed, 707 passed, 2 skipped, 20 warnings, 15 errors in 41.57s =======
