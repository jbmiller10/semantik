# Docker Compose overlay configuration for PostgreSQL support
# Usage: docker compose -f docker-compose.yml -f docker-compose.postgres.yml up -d
version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: semantik-postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-semantik}
      - POSTGRES_USER=${POSTGRES_USER:-semantik}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-CHANGE_THIS_TO_A_STRONG_PASSWORD}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=en_US.utf8 --lc-ctype=en_US.utf8
      - PGDATA=/var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      # Optional: Mount init scripts
      # - ./scripts/postgres/init:/docker-entrypoint-initdb.d:ro
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - DAC_READ_SEARCH
      - FOWNER
      - SETGID
      - SETUID
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          memory: 1G
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-semantik} -d ${POSTGRES_DB:-semantik}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    shm_size: 256mb  # Shared memory for PostgreSQL performance

  # Update webui service to depend on postgres
  webui:
    environment:
      # PostgreSQL configuration
      - DATABASE_URL=${DATABASE_URL:-postgresql://${POSTGRES_USER:-semantik}:${POSTGRES_PASSWORD:-CHANGE_THIS_TO_A_STRONG_PASSWORD}@postgres:5432/${POSTGRES_DB:-semantik}}
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=${POSTGRES_DB:-semantik}
      - POSTGRES_USER=${POSTGRES_USER:-semantik}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-CHANGE_THIS_TO_A_STRONG_PASSWORD}
      # Connection pool settings
      - DB_POOL_SIZE=${DB_POOL_SIZE:-20}
      - DB_MAX_OVERFLOW=${DB_MAX_OVERFLOW:-40}
      - DB_POOL_TIMEOUT=${DB_POOL_TIMEOUT:-30}
      - DB_POOL_RECYCLE=${DB_POOL_RECYCLE:-3600}
      - DB_POOL_PRE_PING=${DB_POOL_PRE_PING:-true}
    depends_on:
      postgres:
        condition: service_healthy
      vecpipe:
        condition: service_started
      redis:
        condition: service_started

  # Update worker service to depend on postgres
  worker:
    environment:
      # PostgreSQL configuration
      - DATABASE_URL=${DATABASE_URL:-postgresql://${POSTGRES_USER:-semantik}:${POSTGRES_PASSWORD:-CHANGE_THIS_TO_A_STRONG_PASSWORD}@postgres:5432/${POSTGRES_DB:-semantik}}
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=${POSTGRES_DB:-semantik}
      - POSTGRES_USER=${POSTGRES_USER:-semantik}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-CHANGE_THIS_TO_A_STRONG_PASSWORD}
      # Connection pool settings
      - DB_POOL_SIZE=${DB_POOL_SIZE:-10}
      - DB_MAX_OVERFLOW=${DB_MAX_OVERFLOW:-20}
      - DB_POOL_TIMEOUT=${DB_POOL_TIMEOUT:-30}
      - DB_POOL_RECYCLE=${DB_POOL_RECYCLE:-3600}
      - DB_POOL_PRE_PING=${DB_POOL_PRE_PING:-true}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
      qdrant:
        condition: service_started

  # Update vecpipe service to depend on postgres (if needed for future)
  vecpipe:
    environment:
      # PostgreSQL configuration (for future use)
      - DATABASE_URL=${DATABASE_URL:-postgresql://${POSTGRES_USER:-semantik}:${POSTGRES_PASSWORD:-CHANGE_THIS_TO_A_STRONG_PASSWORD}@postgres:5432/${POSTGRES_DB:-semantik}}
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=${POSTGRES_DB:-semantik}
      - POSTGRES_USER=${POSTGRES_USER:-semantik}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-CHANGE_THIS_TO_A_STRONG_PASSWORD}
    depends_on:
      postgres:
        condition: service_healthy
      qdrant:
        condition: service_started

volumes:
  # Named volume for PostgreSQL data persistence
  postgres_data:
    driver: local

# Network is already defined in main docker-compose.yml